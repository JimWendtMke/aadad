{
    "pipes": [],
    "interfaces": [
        {
            "name": "GlobalMessageType",
            "id": "interface-GlobalMessageType-a8939a905f93a03e88afcbfc851d476bdcb2770e95cc1f6a426e85d2c9f292d76f166cf434c394da5180458fb0941930e9219e256b0e6fee695b8fb854e78296",
            "file": "src/app/interfaces/global-message-type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GlobalMessageType {\n  severity?: string;\n  summary?: string;\n  detail?: string;\n  id?: any;\n  key?: string;\n  life?: number;\n  sticky?: boolean;\n  closable?: boolean;\n  data?: any;\n  icon?: string;\n  contentStyleClass?: string;\n  styleClass?: string;\n}\n",
            "properties": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "contentStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "life",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxButtonType",
            "id": "interface-GuxButtonType-918dc6d03ea6843d467fbf234a5c3385839e67e9ba117ca555d867840f92ab934a5641a4f9ac133726d465dd23032887c5eafa1f41bfb4a69dc9d1f60d86a131",
            "file": "src/app/gux/interfaces/gux-button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxButtonType {\n  /**\n  * Type of the button\n  */\n  type?: '' | 'button' | 'submit' | 'reset';\n  /**\n  * When present, it specifies the text of the button\n  */\n  label?: string;\n  /**\n  * Style of the button color\n  */\n  buttonMode?: '' | 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'help' | 'danger';\n  /**\n  * Size of the button\n  */\n  buttonSize?: '' | 'sm' | 'lg';\n  /**\n  * When present, it specifies the icon to be displayed in the button\n  */\n  icon?: string;\n  /**\n  * Position of the icon displayed in the button\n  */\n  iconPosition?: '' | 'left' | 'right';\n  /**\n  * When present, it specifies the tooltip text for the button\n  */\n  tooltip?: string;\n  /**\n  * Position of the tooltip displayed for the button\n  */\n  tooltipPosition?: '' | 'top' | 'left' | 'bottom' | 'right';\n  /**\n  * When present and true, it specifies that the button should be disabled\n  */\n  isDisabled?: boolean;\n  /**\n  * When present and true, it specifies that the button should be raised\n  */\n  isRaised?: boolean;\n  /**\n  * When present and true, it specifies that the button should be rounded\n  */\n  isRounded?: boolean;\n  /**\n  * When present and true, it specifies that the button should be outlined\n  */\n  isOutlined?: boolean;\n  /**\n  * When present, it specifies that the inline style to apply to the button\n  */\n  inlineStyle?: string;\n  /**\n  * Callback to execute when button is clicked\n  */\n  (clicked?: string): void;\n  /**\n  * Callback to execute when button is focused\n  */\n  (focused?: string): void;\n  /**\n  * Callback to execute when button loses focus\n  */\n  (blurred?: string): void;\n}\n",
            "properties": [
                {
                    "name": "buttonMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"help\" | \"danger\"",
                    "optional": true,
                    "description": "<p>Style of the button color</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nStyle of the button color\n"
                },
                {
                    "name": "buttonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"sm\" | \"lg\"",
                    "optional": true,
                    "description": "<p>Size of the button</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nSize of the button\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the icon to be displayed in the button</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the button\n"
                },
                {
                    "name": "iconPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"left\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the icon displayed in the button</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nPosition of the icon displayed in the button\n"
                },
                {
                    "name": "inlineStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies that the inline style to apply to the button</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nWhen present, it specifies that the inline style to apply to the button\n"
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be disabled</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be disabled\n"
                },
                {
                    "name": "isOutlined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be outlined</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be outlined\n"
                },
                {
                    "name": "isRaised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be raised</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be raised\n"
                },
                {
                    "name": "isRounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be rounded</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be rounded\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the text of the button</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nWhen present, it specifies the text of the button\n"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the tooltip text for the button</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nWhen present, it specifies the tooltip text for the button\n"
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the tooltip displayed for the button</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPosition of the tooltip displayed for the button\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | \"button\" | \"submit\" | \"reset\"",
                    "optional": true,
                    "description": "<p>Type of the button</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nType of the button\n"
                },
                {
                    "id": "call-declaration-918dc6d03ea6843d467fbf234a5c3385839e67e9ba117ca555d867840f92ab934a5641a4f9ac133726d465dd23032887c5eafa1f41bfb4a69dc9d1f60d86a131",
                    "args": [
                        {
                            "name": "clicked",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "void",
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallback to execute when button is clicked\n",
                    "description": "<p>Callback to execute when button is clicked</p>\n"
                },
                {
                    "id": "call-declaration-918dc6d03ea6843d467fbf234a5c3385839e67e9ba117ca555d867840f92ab934a5641a4f9ac133726d465dd23032887c5eafa1f41bfb4a69dc9d1f60d86a131",
                    "args": [
                        {
                            "name": "focused",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "void",
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallback to execute when button is focused\n",
                    "description": "<p>Callback to execute when button is focused</p>\n"
                },
                {
                    "id": "call-declaration-918dc6d03ea6843d467fbf234a5c3385839e67e9ba117ca555d867840f92ab934a5641a4f9ac133726d465dd23032887c5eafa1f41bfb4a69dc9d1f60d86a131",
                    "args": [
                        {
                            "name": "blurred",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "void",
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCallback to execute when button loses focus\n",
                    "description": "<p>Callback to execute when button loses focus</p>\n"
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "GlobalMessageService",
            "id": "injectable-GlobalMessageService-a4fad05a39167ed3ba3e26a075b01221f51d980f635c98fca1aa763081f06769efb02e1497da1d305477cb27a9a502f71016d80ad05baf5a3fdcd94a6e221e3d",
            "file": "src/app/services/global-message.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "GlobalMessageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "GlobalMessageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { GlobalMessageType } from '../interfaces/global-message-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalMessageService {\n\n  private subject = new Subject<any>();\n\n  sendMessage(message: GlobalMessageType) {\n    this.subject.next(message);\n  }\n\n  clearMessages() {\n    this.subject.next();\n  }\n\n  getMessage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "CocoaDocsRouteGuardService",
            "id": "injectable-CocoaDocsRouteGuardService-81140b432c77f134cb0ff8555de9b4437c50e7ccf179e93f388d43a6c5e874b4cca0d373dfec51ec79867e7d75dc090ece6fdcc3c74fd21adedd5d2a6e0b7d2c",
            "file": "src/app/docs/services/route-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nimport { CocoaDocsService } from './docs.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CocoaDocsRouteGuardService implements CanActivate {\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private cocoaDocsService: CocoaDocsService\r\n  ) { }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\r\n\r\n    /**\r\n    * Hard coded route (ie: home, variables)\r\n    */\r\n    if (!route.params && !route.params.target) {\r\n      return of(true);\r\n    }\r\n\r\n    /**\r\n    * Get the URL parameters for testing\r\n    */\r\n    let target: string;\r\n    let type: string;\r\n    if (route.params && route.params.target) {\r\n      target = route.params.target;\r\n    }\r\n    if (route.routeConfig.path.search(/:target/)) {\r\n      type = route.routeConfig.path.split('/')[0];\r\n    }\r\n\r\n    if (this.cocoaDocsService.canNavigate(type, target)) {\r\n      return of(true);\r\n    }\r\n    this.router.navigate(['error404']);\r\n    return of(false);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cocoaDocsService",
                        "type": "CocoaDocsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cocoaDocsService",
                        "type": "CocoaDocsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-216456583e25428faed77a4328eb6552448b3ca5a60c594cca6093d48f5332766845debfe0c05c76cc89e95f1f958caf3ad9253a229c2cc3a570b8ec03f2b4c7",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-05291ecf4a84936ac5ec230c7ff42ed586d6e5142a9bf4b433569d8a25b87b7ba35802885118f0b022025151fef46463c23bed820c2d80ba91f874d811c94cc4",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "GlobalMessageService"
                },
                {
                    "name": "PrimeMessageService"
                }
            ],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "primeMessageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PrimeMessageService",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "title",
                    "defaultValue": "'developer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expandAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveToggle",
                    "args": [
                        {
                            "name": "node",
                            "type": "TreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isExpand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isExpand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { TreeNode } from 'primeng/api';\nimport { MessageService as PrimeMessageService } from 'primeng/api';\n\nimport { GlobalMessageService } from './services/global-message.service';\nimport { GlobalMessageType } from './interfaces/global-message-type';\n\nimport { Navigation } from './navigation';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [ GlobalMessageService, PrimeMessageService ]\n})\n\nexport class AppComponent implements OnDestroy {\n  title = 'developer';\n  navigation: any;\n  messages: any = [];\n  subscription: Subscription;\n\n  constructor(\n    private router: Router,\n    public primeMessageService: PrimeMessageService,\n    private globalMessageService: GlobalMessageService\n  ) {\n    this.navigation = Navigation;\n    this.subscription = this.globalMessageService.getMessage().subscribe(message => {\n      this.messages.push(message);\n      this.primeMessageService.add(message);\n    });\n  }\n\n  nodeSelect(event) {\n    if (event.node.type === 'navigation' && event.node.data) {\n      this.router.navigateByUrl(event.node.data);\n    }\n  }\n\n  expandAll(){\n    this.navigation.forEach(node => {\n      this.recursiveToggle(node, true);\n    });\n  }\n\n  collapseAll(){\n    this.navigation.forEach( node => {\n      this.recursiveToggle(node, false);\n    });\n  }\n\n  recursiveToggle(node:TreeNode, isExpand:boolean){\n    node.expanded = isExpand;\n    if (node.children) {\n      node.children.forEach( childNode => {\n        this.recursiveToggle(childNode, isExpand);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~primeng/resources/themes/bootstrap4-light-blue/theme.css\";\n\nbody {\n    height: 100%;\n    width: 100%;\n}\n\n.banner {\n    position: fixed;\n    top: 0px;\n    left: 50%;\n    z-index: 1001;\n    margin-left: -300px;\n    width: 600px;\n}\n\n.content-wrapper {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    width: 100%;\n    font-family: 'Open Sans', sans-serif;\n    display: flex;\n    margin-left: -10px;\n    .left {\n        background-color: #ffffff;\n        width: 300px;\n        min-width: 300px;\n        max-width: 300px;\n        box-shadow: -6px 10px 4px 8px #c8c8c8;\n        .button-wrapper {\n            margin: 35px;\n            text-align: center;\n        }\n    }\n    .right {\n        width: calc(100% - #{300px});\n        .demo-header {\n            z-index: 1000;\n            background-image: linear-gradient(197.37deg,rgba(0,120,227,.07) -.38%,rgba(165,72,181,0) 101.89%),linear-gradient(115.93deg,rgba(62,136,246,.15) 4.86%,rgba(62,180,246,.0495) 38.05%,rgba(62,235,246,0) 74.14%),radial-gradient(56.47% 76.87% at 6.92% 7.55%,rgba(62,136,246,.05) 0%,rgba(62,158,246,.013) 52.16%,rgba(62,246,246,0) 100%),linear-gradient(306.53deg,rgba(163,171,217,.1) 19.83%,rgba(163,171,217,0) 97.33%);\n            margin-bottom: 0px;\n            padding: 15px;\n            text-align: center;\n            border-bottom: 1px solid #dee2e6;\n            h1 {\n                color: #007bff;\n                font-size: 40px;\n                font-weight: 200;\n                margin-top: 22px;\n            }\n        }\n        .content {\n            padding: 50px;\n        }\n    }\n}\n\n:host ::ng-deep .p-tree {\n    border-color: transparent;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "primeMessageService",
                        "type": "PrimeMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "primeMessageService",
                        "type": "PrimeMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"banner\">\n  <p-messages [(value)]=\"messages\"></p-messages>\n</div>\n<p-toast></p-toast>\n\n<!--\n<gux-banner></gux-banner>\n-->\n\n<div class=\"content-wrapper\">\n  <span class=\"left\">\n    <!--\n\n    <div>\n      <span class=\"icon\"></span>\n    </div>\n    -->\n\n    <div class=\"button-wrapper\">\n      <gux-button\n        icon=\"angle-double-right\"\n        isRounded=\"true\"\n        isRaised=\"true\"\n        pTooltip=\"Expand All\"\n        tooltipPosition=\"bottom\"\n        (click)=\"expandAll()\"\n        inlineStyle=\"margin-right:.5rem\"\n      ></gux-button>\n      <gux-button\n        isRounded=\"true\"\n        isRaised=\"true\"\n        icon=\"angle-double-up\"\n        pTooltip=\"Collapse All\"\n        tooltipPosition=\"bottom\"\n        (click)=\"collapseAll()\"\n      ></gux-button>\n    </div>\n\n    <p-tree\n        class=\"navTree\"\n        [value]=\"navigation\"\n        selectionMode=\"single\"\n        (onNodeSelect)=\"nodeSelect($event)\"\n    ></p-tree>\n  </span>\n\n  <div class=\"right\" style=\"overflow-y:auto\">\n    <div class=\"demo-header\">\n      <h1><u>A</u>utomated <u>A</u>ngular <u>D</u>ocumentation <u>a</u>nd <u>D</u>emo Library</h1>\n    </div>\n\n    <gux-button\n      label=\"large\"\n      buttonSize=\"lg\"\n      buttonMode=\"help\"\n      icon=\"check\"\n      iconPosition=\"left\"\n      disabled=\"false\"\n      isOutlined=true \n    ></gux-button>\n\n    <gux-button\n      label=\"normal\"\n      buttonMode=\"warning\"\n      isRounded=true\n      isOutlined=true\n    ></gux-button>\n\n    <gux-button\n      label=\"small\"\n      buttonSize=\"sm\"\n      icon=\"check\"\n      iconPosition=\"right\"\n      buttonMode=\"info\"\n      tooltip=\"hello\"\n      tooltipPosition=\"bottom\"\n      isRaised=true\n    ></gux-button>\n\n    <div class=\"content\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n\n</div>"
        },
        {
            "name": "DocsComponent",
            "id": "component-DocsComponent-d5b5a99bdc6b70fa9d55bb25619aca203ef9fc9f3b094cc3ff0b47944c8cd827955b090956defffc63b2af7c8cef5ea41a59e73af3f76ff7acf76209bb202471",
            "file": "src/app/docs/docs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-docs",
            "styleUrls": [
                "./docs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./docs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { GlobalMessageService } from '../services/global-message.service';\nimport { GlobalMessageType } from '../interfaces/global-message-type';\n\n@Component({\n  selector: 'app-docs',\n  templateUrl: './docs.component.html',\n  styleUrls: ['./docs.component.scss']\n})\nexport class DocsComponent implements OnInit {\n\n  constructor(\n    private globalMessageService: GlobalMessageService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  sendMessage(): void  {\n    const messagePacket: GlobalMessageType = {\n      severity: 'warn',\n      summary: 'This is the message summary',\n      detail: 'This is the message detail',\n      id: 0,\n      key: 'gux-banner',\n      life: 30,\n      sticky: true,\n      closable: true,\n      data: {\n        field1: '1',\n        field2: '2'\n      },\n      icon: 'warning',\n      contentStyleClass: '',\n      styleClass: ''\n    }\n    this.globalMessageService.sendMessage(messagePacket);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./docs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>docs works!</p>\n\n<button type=\"button\" (click)=\"sendMessage()\">Show Banner</button>\n"
        },
        {
            "name": "ErrorPage404Component",
            "id": "component-ErrorPage404Component-77027ee4bcd243f2474a17260807a1c2a96680bf4e3ad6949a72fb5c807fd26359fa9390078cb998b9c4fee7a850c6b2efa43ab43df22dbb70c4301dd062e1d5",
            "file": "src/app/docs/components/error-page-404/error-page-404.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "error-page-404",
            "styleUrls": [
                "../../assets/styles/base-styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-page-404.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'error-page-404',\n  templateUrl: './error-page-404.component.html',\n  styleUrls: ['../../assets/styles/base-styles.scss']\n})\nexport class ErrorPage404Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  font-family: \"Open Sans\";\n  background-color: white;\n  border-radius: 10px 10px 0px 0px;\n  .selector {\n    color: orange;\n  }\n  .arrows {\n    color: #b6b6b6;\n  }\n  .deprecated {\n    font-style: italic;\n    color: red;\n  }\n  .deprecation-message {\n    margin-top: -15px;\n  }\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    td,\n    th {\n      text-align: left;\n    }\n  }\n  .copy-data {\n    color: #343a40;\n    background-color: transparent;\n    font-size: 24px;\n    :hover {\n      color: orange;\n    }\n  }\n}\n\n.selector-wrapper {\n    border: 1px solid #c8c8c8;\n    background: #f4f4f4;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 3px;\n}\n\n.comp-error-container {\n  padding: 20px;\n  padding-top: 85px;\n  margin-right: 0px;\n  margin-left: 0px;\n  .comp-error-title {\n    margin-bottom: 10px;\n    font-size: 24px;\n    color: orange;\n  }\n  .comp-error-body {\n    padding: 20px;\n    border: 1px solid #acb3b9;\n    border-radius: 10px;\n    .comp-error-header {\n      font-size: 16px;\n      font-weight: bold;\n    }\n    .comp-error-content {\n      margin: 15px 0px;\n      color: #838b92;\n    }\n    .comp-error-footer {\n      color: #838b92;\n      margin-bottom: 30px;\n    }\n  }\n}\n\n.style-url {\n  font-weight: bold;\n  padding-left: 15px;\n  margin-bottom: -15px;\n}\n\n:host ::ng-deep hr {\n  margin-top: 1.2rem;\n  width: 80%;\n  float: left;\n  border-top-color: orange;\n}\n\n:host ::ng-deep .p-grid {\n  margin: 10px 5px;\n  .p-col {\n    padding: 10px;\n  }\n}\n/**\n* Override the github css styles for easier reading\n*/\n:host ::ng-deep .hljs-ln-numbers {\n  width: 25px;\n  border-right: 1px solid #24292e;\n}\n:host ::ng-deep .hljs-ln-code {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "../../assets/styles/base-styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div id=\"content\">\n    <div class=\"comp-error-container row\">\n      <div class=\"col-md-12\">\n        <div class=\"comp-error-title\">\n          The documentation page you navigated to is not currently in CocoaCUX\n        </div>\n        <div class=\"comp-error-body\">\n          <div class=\"comp-error-header\">\n            404 - Not Found\n          </div>\n          <div class=\"comp-error-content\">\n            The page you requested does not exist. You may have typed the address incorrectly, or the link or applicaiton that brought you here may be out of date.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"
        },
        {
            "name": "GuxButtonComponent",
            "id": "component-GuxButtonComponent-3f29a84b5ecc09d14903def5bd799ba0e539cf01780048c1ee06ebd97a1a8c52767d193191e1b0680869f20ac22e4b38f10b3989682351d46d68a927e1deb720",
            "file": "src/app/gux/components/gux-button/gux-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gux-button",
            "styleUrls": [
                "./gux-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonMode",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStyle of the button color\n",
                    "description": "<p>Style of the button color</p>\n",
                    "line": 22,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "buttonSize",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the button\n",
                    "description": "<p>Size of the button</p>\n",
                    "line": 26,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the button\n",
                    "description": "<p>When present, it specifies the icon to be displayed in the button</p>\n",
                    "line": 30,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition of the icon displayed in the button\n",
                    "description": "<p>Position of the icon displayed in the button</p>\n",
                    "line": 34,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "inlineStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the inline style to apply to the button\n",
                    "description": "<p>When present, it specifies that the inline style to apply to the button</p>\n",
                    "line": 62,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be disabled\n",
                    "description": "<p>When present, it specifies that the button should be disabled</p>\n",
                    "line": 46,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "isOutlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be outlined\n",
                    "description": "<p>When present, it specifies that the button should be outlined</p>\n",
                    "line": 58,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "isRaised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be raised\n",
                    "description": "<p>When present, it specifies that the button should be raised</p>\n",
                    "line": 50,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "isRounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be rounded\n",
                    "description": "<p>When present, it specifies that the button should be rounded</p>\n",
                    "line": 54,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the text of the button\n",
                    "description": "<p>When present, it specifies the text of the button</p>\n",
                    "line": 18,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the tooltip text for the button\n",
                    "description": "<p>When present, it specifies the tooltip text for the button</p>\n",
                    "line": 38,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition of the tooltip displayed for the button\n",
                    "description": "<p>Position of the tooltip displayed for the button</p>\n",
                    "line": 42,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the button\n",
                    "description": "<p>Type of the button</p>\n",
                    "line": 14,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClass",
                    "defaultValue": "'p-button '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "onBtnBlur",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBtnClick",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBtnFocus",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildButtonConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { GuxButtonType } from '../../interfaces/gux-button.interface';\n\n@Component({\n  selector: 'gux-button',\n  templateUrl: './gux-button.component.html',\n  styleUrls: ['./gux-button.component.scss'],\n})\nexport class GuxButtonComponent implements OnInit {\n  /**\n  * Type of the button\n  */\n  @Input() type: GuxButtonType['type'] = 'button';\n  /**\n  * When present, it specifies the text of the button\n  */\n  @Input() label: GuxButtonType['label'] = '';\n  /**\n  * Style of the button color\n  */\n  @Input() buttonMode: GuxButtonType['buttonMode'] = 'primary';\n  /**\n  * Size of the button\n  */\n  @Input() buttonSize: GuxButtonType['buttonSize'] = '';\n  /**\n  * When present, it specifies the icon to be displayed in the button\n  */\n  @Input() icon: GuxButtonType['icon'] = '';\n  /**\n  * Position of the icon displayed in the button\n  */\n  @Input() iconPosition: GuxButtonType['iconPosition'] = '';\n  /**\n  * When present, it specifies the tooltip text for the button\n  */\n  @Input() tooltip: GuxButtonType['tooltip'] = '';\n  /**\n  * Position of the tooltip displayed for the button\n  */\n  @Input() tooltipPosition: GuxButtonType['tooltipPosition'] = '';\n  /**\n  * When present, it specifies that the button should be disabled\n  */\n  @Input() isDisabled: GuxButtonType['isDisabled'] = false;\n  /**\n  * When present, it specifies that the button should be raised\n  */\n  @Input() isRaised: GuxButtonType['isRaised'] = false;\n  /**\n  * When present, it specifies that the button should be rounded\n  */\n  @Input() isRounded: GuxButtonType['isRounded'] = false;\n  /**\n  * When present, it specifies that the button should be outlined\n  */\n  @Input() isOutlined: GuxButtonType['isOutlined'] = false;\n  /**\n  * When present, it specifies that the inline style to apply to the button\n  */\n  @Input() inlineStyle: GuxButtonType['inlineStyle'] = '';\n\n  @Output() onClick = new EventEmitter();\n  @Output() onFocus = new EventEmitter();\n  @Output() onBlur = new EventEmitter();\n\n  buttonClass: string = 'p-button ';\n\n  constructor() {}\n\n  ngOnInit() {\n    this.buildButtonConfig();\n  }\n\n  buildButtonConfig() {\n    if (this.buttonSize) {\n      this.buttonClass = 'p-button-' + this.buttonSize + ' ';    \n    }\n    if (this.buttonMode) {\n      this.buttonClass += 'p-button-' + this.buttonMode + ' ';\n    }\n    if (!!this.isRaised) {\n      this.buttonClass += 'p-button-raised ';\n    }\n    if (!!this.isRounded) {\n      this.buttonClass += 'p-button-rounded ';\n    }\n    if (!!this.isOutlined) {\n      this.buttonClass += 'p-button-outlined ';\n    }\n  }\n\n  public onBtnClick = ($event) => {\n    console.log('Clicked');\n    this.onClick.emit({ event: $event });\n  }\n\n  public onBtnFocus = ($event) => {\n    console.log('Focused');\n    this.onFocus.emit({ event: $event });\n  }\n\n  public onBtnBlur = ($event) => {\n    console.log('Blurred');\n    this.onBlur.emit({ event: $event });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./gux-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 68
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\n  pButton pRipple\n  [type]=\"type\"\n  [label]=\"label\"\n  [class]=\"buttonClass\"\n  [pTooltip]=\"tooltip\"\n  [tooltipPosition]=\"tooltipPosition\"\n  [icon]=\"'pi pi-' + icon\"\n  [iconPos]=\"iconPosition\"\n  [style]=\"inlineStyle\"\n  [disabled]=\"isDisabled\"\n  (click)=\"onBtnClick($event)\"\n  (focus)=\"onBtnFocus($event)\"\n  (blur)=\"onBtnBlur($event)\"\n></button>"
        },
        {
            "name": "GuxComponent",
            "id": "component-GuxComponent-47993aa78f03f9d6f584c3a042013e790ec360b2bce4d3b671cb8e555fbcbd2cd20da778d8e978c8052d41fd4d18af06ff3c7e229cb594d0aa7577a2130b83ff",
            "file": "src/app/gux/gux.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-gux",
            "styleUrls": [
                "./gux.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-gux',\n  templateUrl: './gux.component.html',\n  styleUrls: ['./gux.component.scss']\n})\nexport class GuxComponent implements OnInit {\n\n  constructor( ) { }\n\n  ngOnInit(): void { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./gux.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>gux works!</p>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-4f3244c613b24131800f4ffe3daf8ecc2c158611af78587716a302047a8b559afd9a4cde6c4015e138123b14c22fcebfe2a96751fcb3e67e475f38da75f671f6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { PrimengModule } from './primeng/primeng.module';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { DemosModule } from './demos/demos.module';\nimport { DocsModule } from './docs/docs.module';\nimport { GuxModule } from './gux/gux.module';\n\n\n@NgModule({\n  declarations: [ AppComponent ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n\n    PrimengModule,\n\n    DemosModule,\n    DocsModule,\n    GuxModule\n  ],\n  exports: [ PrimengModule ],\n  providers: [ ],\n  bootstrap: [ AppComponent ]\n})\n\nexport class AppModule {\n  /**\n  constructor(private docsService: docsService) {\n    this.docsService.setDemoComponents({\n      GuxBadgeComponent: {\n        name: 'GuxBadgeDemoComponent',\n        demo: GuxBadgeDemoComponent\n      },\n      GuxBannerComponent: {\n        name: 'GuxBannerDemoComponent',\n        demo: GuxBannerDemoComponent\n      },\n      GuxButtonComponent: {\n        name: 'GuxButtonDemoComponent',\n        demo: GuxButtonDemoComponent\n      },\n      GuxCheckboxComponent: {\n        name: 'GuxCheckboxDemoComponent',\n        demo: GuxCheckboxDemoComponent\n      },\n      GuxInputDirective: {\n        name: 'GuxInputDemoComponent',\n        demo: GuxInputDemoComponent\n      }\n    });\n  }\n  */\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "DemosModule"
                        },
                        {
                            "name": "DocsModule"
                        },
                        {
                            "name": "GuxModule"
                        },
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-b01813f4324106b1fe1994246610a135babb69da9728c369d72370f91cd6c8a6737f5811e688874f5f82afce0628d6bb17eac3dff6eac23668669757d68b8844",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DocsComponentBaseComponent } from './docs/components/component-base/component-base.component';\n\nimport { DocsComponent } from './docs/docs.component';\nconst routes: Routes = [{\n  path: '',\n  redirectTo: 'docs',\n  pathMatch: 'full'\n}, {\n  path: 'docs',\n  component: DocsComponent\n}, {\n  path: 'components/:target',\n  component: DocsComponentBaseComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemosModule",
            "id": "module-DemosModule-089b684a5ed4907274fd39469ea04fa624af73c73f47b1308a36d502af10b75b43b22fa4e390d47b57fa8546cbc9169605473ef514a6fd32a3e8a466675bd6ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demos/demos.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class DemosModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsModule",
            "id": "module-DocsModule-cc459400141db3d9065652498266c14dc1a3510f29ee6719e54dd82f025114705c6bfcd77e98e4bc53de04689924b59b82106282091120ca33417d9352061868",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/docs/docs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\n\nimport { PrimengModule } from '../primeng/primeng.module';\n\nimport { DocsComponent } from './docs.component';\nimport { DocsComponentBaseComponent } from './components/component-base/component-base.component';\n\n\n\n@NgModule({\n  declarations: [\n    DocsComponent,\n    DocsComponentBaseComponent\n  ],\n  imports: [\n    CommonModule,\n    PrimengModule,\n    HighlightModule\n  ],\n  providers: [{\n    provide: HIGHLIGHT_OPTIONS,\n    useValue: {\n      coreLibraryLoader: () => import('highlight.js/lib/core'),\n      lineNumbersLoader: () => import('highlightjs-line-numbers.js'),\n      languages: {\n        typescript: () => import('highlight.js/lib/languages/typescript'),\n        css: () => import('highlight.js/lib/languages/css'),\n        scss: () => import('highlight.js/lib/languages/scss'),\n        json: () => import('highlight.js/lib/languages/json'),\n        xml: () => import('highlight.js/lib/languages/xml')\n      }\n    }\n  }]\n})\nexport class DocsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GuxModule",
            "id": "module-GuxModule-4e30f3ae6e2930f7fed381e39afc32a2ec1ad82e56dd9ede2adfc95a0c662b20436c2fe38b82f8c1ea08e4df1c518e5202bfe3c60e178cd906b7c916ea3a2c06",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/gux/gux.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PrimengModule } from '../primeng/primeng.module';\n\nimport { GuxButtonComponent } from './components/gux-button/gux-button.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PrimengModule\n  ],\n  declarations: [\n    GuxButtonComponent\n  ],\n  exports: [\n    GuxButtonComponent\n  ]\n})\nexport class GuxModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GuxButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GuxButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrimengModule",
            "id": "module-PrimengModule-44282e35bc9d15e263c9161ef70be881703611c3e3e3891d6d78f1eae03de9eebe344fa4d135448bbe63cd5f986a90ac8d4ee26f0548fa98003f7e35350346e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/primeng/primeng.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccordionModule } from 'primeng/accordion';\nimport { BadgeModule } from 'primeng/badge';\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { MessageModule } from 'primeng/message';\nimport { MessagesModule } from 'primeng/messages';\nimport { TableModule, Table } from 'primeng/table';\nimport { TabViewModule, TabView, TabPanel } from 'primeng/tabview';\nimport { ToastModule } from 'primeng/toast';\nimport { TooltipModule } from \"primeng/tooltip\";\nimport { TreeModule } from 'primeng/tree';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n\n    AccordionModule,\n    BadgeModule,\n    ButtonModule,\n    DropdownModule,\n    MessageModule,\n    MessagesModule,\n    TableModule,\n    TabViewModule,\n    ToastModule,\n    TooltipModule,\n    TreeModule\n  ],\n  exports: [\n    AccordionModule,\n    BadgeModule,\n    ButtonModule,\n    MessageModule,\n    MessagesModule,\n    TableModule,\n    TabViewModule,\n    ToastModule,\n    TooltipModule,\n    TreeModule\n  ]\n})\nexport class PrimengModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CURD_ACTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  deleteError: 'deleteError',\n  delete: 'delete',\n  addError: 'addError',\n  add: 'add',\n}"
            },
            {
                "name": "DefaultPageSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "50"
            },
            {
                "name": "DefaultRetainCache",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "true"
            },
            {
                "name": "EnumerationColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'value',\n  header: 'Value'\n}]"
            },
            {
                "name": "EnumerationIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "HostListenersColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "InputColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "InterfaceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "MethodsColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "Navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TreeNode[]",
                "defaultValue": "[\n  {\n    label: 'Home',\n    type: 'navigation',\n    data: '/'\n  }, {\n    label: 'Components',\n    type: 'navigation',\n    data: 'components/home/cux',\n    children: [\n      {\n        label: 'Badge',\n        type: 'navigation',\n        data: 'components/CuxBadgeComponent'\n      },\n      {\n        label: 'Banner',\n        type: 'navigation',\n        data: 'components/CuxBannerComponent'\n      },\n      {\n        label: 'Button',\n        type: 'navigation',\n        data: 'components/GuxButtonComponent'\n      },\n      {\n        label: 'Checkbox',\n        type: 'navigation',\n        data: 'components/CuxCheckboxComponent'\n      },\n      {\n        label: 'Dropdown',\n        type: 'navigation',\n        data: 'components/CuxDropdownComponent'\n      },\n    ],\n  },\n  {\n    label: 'Services',\n    type: 'navigation',\n    data: 'services/home/cux',\n    children: [\n      {\n        label: 'Success Message',\n        type: 'navigation',\n        data: 'services/SuccessMessageService'\n      },\n    ],\n  },\n  {\n    label: 'Interfaces',\n    type: 'navigation',\n    data: 'interfaces/home/cux',\n    children: [\n      {\n        label: 'Accordion Item',\n        type: 'navigation',\n        data: 'interfaces/AccordionItem'\n      },\n      {\n        label: 'Accordion Items',\n        type: 'navigation',\n        data: 'interfaces/AccordionItems'\n      },\n      {\n        label: 'Accordion Title',\n        type: 'navigation',\n        data: 'interfaces/AccordionTitle'\n      },\n      {\n        label: 'Badge',\n        type: 'navigation',\n        data: 'interfaces/CuxBadgeModel'\n      },\n      {\n        label: 'Breadcrumb',\n        type: 'navigation',\n        data: 'interfaces/Breadcrumb'\n      },\n      {\n        label: 'Button',\n        type: 'navigation',\n        data: 'interfaces/Button'\n      },\n      {\n        label: '360 Summary Card',\n        type: 'navigation',\n        data: 'interfaces/CuxCard360SummaryCard'\n      },\n      {\n        label: 'Check Box',\n        type: 'navigation',\n        data: 'interfaces/CheckBoxItem'\n      },\n      {\n        label: 'Dropdown Item',\n        type: 'navigation',\n        data: 'interfaces/CuxDropdownItem'\n      },\n      {\n        label: 'Dropdown Item Value',\n        type: 'navigation',\n        data: 'interfaces/CuxDropDownItemValue'\n      },\n      {\n        label: 'Footer Button',\n        type: 'navigation',\n        data: 'interfaces/FooterButton',\n      },\n      {\n        label: 'Radio Button',\n        type: 'navigation',\n        data: 'interfaces/RadioButtonItem',\n      },\n      {\n        label: 'Selection Change',\n        type: 'navigation',\n        data: 'interfaces/SelectionChange'\n      },\n      {\n        label: 'Sidebar Data',\n        type: 'navigation',\n        data: 'interfaces/SideBarData'\n      },\n      {\n        label: 'Stepper Item',\n        type: 'navigation',\n        data: 'interfaces/StepperItem'\n      }\n    ]\n  }, {\n    label: 'Pipes',\n  }, {\n    label: 'Directives',\n    type: 'navigation',\n    data: 'directives/home/cux',\n    children: [{\n      label: 'Ellipsify',\n      type: 'navigation',\n      data: 'directives/CuxEllipsifyDirective'\n    }, {\n      label: 'Input',\n      type: 'navigation',\n      data: 'directives/CuxInputDirective'\n    }, {\n      label: 'Tooltip',\n      type: 'navigation',\n      data: 'directives/CuxTitleTooltipDirective'\n    }]\n  }, {\n    label: 'Miscellaneous',\n    type: 'navigation',\n    data: 'miscellaneous/home/cux',\n    children: [{\n      label: 'Variables, Enumerations, etc.',\n      type: 'navigation',\n      data: 'miscellaneous/cux'\n    }]\n  }\n]"
            },
            {
                "name": "OutputColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "PropertiesColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "TypealiasIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[]"
            },
            {
                "name": "VariableIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'MODAL_DATA',\n  'require',\n  'testCardAddress'\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/gux/constants.ts": [
                {
                    "name": "CURD_ACTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  deleteError: 'deleteError',\n  delete: 'delete',\n  addError: 'addError',\n  add: 'add',\n}"
                },
                {
                    "name": "DefaultPageSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "50"
                },
                {
                    "name": "DefaultRetainCache",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "true"
                }
            ],
            "src/app/docs/constants.ts": [
                {
                    "name": "EnumerationColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'value',\n  header: 'Value'\n}]"
                },
                {
                    "name": "EnumerationIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "HostListenersColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "InputColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "InterfaceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "MethodsColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "OutputColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "PropertiesColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "TypealiasIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "VariableIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'MODAL_DATA',\n  'require',\n  'testCardAddress'\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/navigation.ts": [
                {
                    "name": "Navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeNode[]",
                    "defaultValue": "[\n  {\n    label: 'Home',\n    type: 'navigation',\n    data: '/'\n  }, {\n    label: 'Components',\n    type: 'navigation',\n    data: 'components/home/cux',\n    children: [\n      {\n        label: 'Badge',\n        type: 'navigation',\n        data: 'components/CuxBadgeComponent'\n      },\n      {\n        label: 'Banner',\n        type: 'navigation',\n        data: 'components/CuxBannerComponent'\n      },\n      {\n        label: 'Button',\n        type: 'navigation',\n        data: 'components/GuxButtonComponent'\n      },\n      {\n        label: 'Checkbox',\n        type: 'navigation',\n        data: 'components/CuxCheckboxComponent'\n      },\n      {\n        label: 'Dropdown',\n        type: 'navigation',\n        data: 'components/CuxDropdownComponent'\n      },\n    ],\n  },\n  {\n    label: 'Services',\n    type: 'navigation',\n    data: 'services/home/cux',\n    children: [\n      {\n        label: 'Success Message',\n        type: 'navigation',\n        data: 'services/SuccessMessageService'\n      },\n    ],\n  },\n  {\n    label: 'Interfaces',\n    type: 'navigation',\n    data: 'interfaces/home/cux',\n    children: [\n      {\n        label: 'Accordion Item',\n        type: 'navigation',\n        data: 'interfaces/AccordionItem'\n      },\n      {\n        label: 'Accordion Items',\n        type: 'navigation',\n        data: 'interfaces/AccordionItems'\n      },\n      {\n        label: 'Accordion Title',\n        type: 'navigation',\n        data: 'interfaces/AccordionTitle'\n      },\n      {\n        label: 'Badge',\n        type: 'navigation',\n        data: 'interfaces/CuxBadgeModel'\n      },\n      {\n        label: 'Breadcrumb',\n        type: 'navigation',\n        data: 'interfaces/Breadcrumb'\n      },\n      {\n        label: 'Button',\n        type: 'navigation',\n        data: 'interfaces/Button'\n      },\n      {\n        label: '360 Summary Card',\n        type: 'navigation',\n        data: 'interfaces/CuxCard360SummaryCard'\n      },\n      {\n        label: 'Check Box',\n        type: 'navigation',\n        data: 'interfaces/CheckBoxItem'\n      },\n      {\n        label: 'Dropdown Item',\n        type: 'navigation',\n        data: 'interfaces/CuxDropdownItem'\n      },\n      {\n        label: 'Dropdown Item Value',\n        type: 'navigation',\n        data: 'interfaces/CuxDropDownItemValue'\n      },\n      {\n        label: 'Footer Button',\n        type: 'navigation',\n        data: 'interfaces/FooterButton',\n      },\n      {\n        label: 'Radio Button',\n        type: 'navigation',\n        data: 'interfaces/RadioButtonItem',\n      },\n      {\n        label: 'Selection Change',\n        type: 'navigation',\n        data: 'interfaces/SelectionChange'\n      },\n      {\n        label: 'Sidebar Data',\n        type: 'navigation',\n        data: 'interfaces/SideBarData'\n      },\n      {\n        label: 'Stepper Item',\n        type: 'navigation',\n        data: 'interfaces/StepperItem'\n      }\n    ]\n  }, {\n    label: 'Pipes',\n  }, {\n    label: 'Directives',\n    type: 'navigation',\n    data: 'directives/home/cux',\n    children: [{\n      label: 'Ellipsify',\n      type: 'navigation',\n      data: 'directives/CuxEllipsifyDirective'\n    }, {\n      label: 'Input',\n      type: 'navigation',\n      data: 'directives/CuxInputDirective'\n    }, {\n      label: 'Tooltip',\n      type: 'navigation',\n      data: 'directives/CuxTitleTooltipDirective'\n    }]\n  }, {\n    label: 'Miscellaneous',\n    type: 'navigation',\n    data: 'miscellaneous/home/cux',\n    children: [{\n      label: 'Variables, Enumerations, etc.',\n      type: 'navigation',\n      data: 'miscellaneous/cux'\n    }]\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "docs",
                        "pathMatch": "full"
                    },
                    {
                        "path": "docs",
                        "component": "DocsComponent"
                    },
                    {
                        "path": "components/:target",
                        "component": "DocsComponentBaseComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    }
}