{
    "pipes": [],
    "interfaces": [
        {
            "name": "City",
            "id": "interface-City-01b29d4eb469267c0e2e5a5f49f1719b6df6d590d52838bcb22a126b7f255b60b1306617870a34a87fc86f799148606da3a1f7508ea4b7620320957aab7f52b1",
            "file": "src/app/app.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { TreeNode } from 'primeng/api';\nimport { MessageService as PrimeMessageService } from 'primeng/api';\n\nimport { GlobalMessageService } from './services/global-message.service';\nimport { GlobalMessageType } from './interfaces/global-message-type';\n\nimport { Navigation } from './navigation';\n\n\ninterface City {\n  name: string,\n  code: string,\n  disabled?: boolean\n}\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [ GlobalMessageService, PrimeMessageService ]\n})\n\nexport class AppComponent implements OnDestroy {\n  title = 'developer';\n  navigation: any;\n  messages: any = [];\n  subscription: Subscription;\n\n\n  cities: City[];\n  selectedCity: City;\n\n\n  sourceCode: string = \"\";\n\n  constructor(\n    private router: Router,\n    public primeMessageService: PrimeMessageService,\n    private globalMessageService: GlobalMessageService\n  ) {\n    this.selectedCity = {\n      name: '',\n      code: ''\n    }\n    this.cities = [\n      {name: 'New York', code: 'NY'},\n      {name: 'Rome, Italy', code: 'RM'},\n      {name: 'London', code: 'LDN'},\n      {name: 'Istanbul', code: 'IST'},\n      {name: 'Paris', code: 'PRS'}\n    ];\n\n\n    this.navigation = Navigation;\n    this.subscription = this.globalMessageService.getMessage().subscribe((message: GlobalMessageType) => {\n      this.messages.push(message);\n      this.primeMessageService.add(message);\n    });\n  }\n\n  nodeSelect(event) {\n    if (event.node.type === 'navigation' && event.node.data) {\n      this.router.navigateByUrl(event.node.data);\n    }\n  }\n\n  expandAll(){\n    this.navigation.forEach(node => {\n      this.recursiveToggle(node, true);\n    });\n  }\n\n  collapseAll(){\n    this.navigation.forEach( node => {\n      this.recursiveToggle(node, false);\n    });\n  }\n\n  recursiveToggle(node:TreeNode, isExpand:boolean){\n    node.expanded = isExpand;\n    if (node.children) {\n      node.children.forEach( childNode => {\n        this.recursiveToggle(childNode, isExpand);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\n",
            "properties": [
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DropdownOptionType",
            "id": "interface-DropdownOptionType-8bcd91cc58e56a3588f7bfe4afd25c41b20e782504a1bedf607e5b4597e2b6397a7532e8b2ad5ac5fb159ab761b4329eb1067d5a3e215a75165d2e72c595c373",
            "file": "src/app/docs/interfaces/dropdown-option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DropdownOptionType {\n  label: string,\n  value: number\n}\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GlobalMessageType",
            "id": "interface-GlobalMessageType-a8939a905f93a03e88afcbfc851d476bdcb2770e95cc1f6a426e85d2c9f292d76f166cf434c394da5180458fb0941930e9219e256b0e6fee695b8fb854e78296",
            "file": "src/app/interfaces/global-message-type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GlobalMessageType {\n  severity?: string;\n  summary?: string;\n  detail?: string;\n  id?: any;\n  key?: string;\n  life?: number;\n  sticky?: boolean;\n  closable?: boolean;\n  data?: any;\n  icon?: string;\n  contentStyleClass?: string;\n  styleClass?: string;\n}\n",
            "properties": [
                {
                    "name": "closable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "contentStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "life",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxAvatarType",
            "id": "interface-GuxAvatarType-871125fbfe1f6208d2fbb9d50164a462ff30ba6eef197f1a25950bc2e0c3652fdfaa77c38ae600db59070d20aaeeed7385282a1faabaf6d3b06788777328aac4",
            "file": "src/app/gux/interfaces/gux-avatar.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxAvatarType {\n  /**\n  * When present, it specifies the size of the avatar\n  */\n  size?: undefined | 'large' | 'xlarge';\n  /**\n  * Specifies the shape of the avatar\n  */\n  shape?: 'circle' | 'square';\n  /**\n  * When present, it specifies the image to be displayed in the avatar\n  */\n  image?: string;\n  /**\n  * When present, it specifies the text to be displayed in the avatar\n  */\n  label?: string;\n  /**\n  * When present, it specifies the icon to be displayed in the avatar\n  */\n  icon?: string;\n  /**\n  * Style of the avatar color\n  */\n  mode?: 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'help' | 'danger' | 'light' | 'dark';\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the icon to be displayed in the avatar</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the avatar\n"
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the image to be displayed in the avatar</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nWhen present, it specifies the image to be displayed in the avatar\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the text to be displayed in the avatar</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nWhen present, it specifies the text to be displayed in the avatar\n"
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"help\" | \"danger\" | \"light\" | \"dark\"",
                    "optional": true,
                    "description": "<p>Style of the avatar color</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nStyle of the avatar color\n"
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"circle\" | \"square\"",
                    "optional": true,
                    "description": "<p>Specifies the shape of the avatar</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nSpecifies the shape of the avatar\n"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "undefined | \"large\" | \"xlarge\"",
                    "optional": true,
                    "description": "<p>When present, it specifies the size of the avatar</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nWhen present, it specifies the size of the avatar\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxButtonType",
            "id": "interface-GuxButtonType-f2600b6cb2cc53c6645b2b4cab891098e84ccb9c34eb92a2a915d29cb089bf1a0bd37dbe8f6020363058672283bebbbbe8d8e3bc39db9fe600f053e467d8cf37",
            "file": "src/app/gux/interfaces/gux-button.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxButtonType {\n  /**\n  * When present, it specifies the type of the button\n  */\n  type?: 'button' | 'submit' | 'reset';\n  /**\n  * When present, it specifies the text of the button\n  */\n  label?: string;\n  /**\n  * Style of the button color\n  */\n  buttonMode?: 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'help' | 'danger';\n  /**\n  * Size of the button\n  */\n  buttonSize?: 'sm' | 'lg';\n  /**\n  * When present, it specifies the icon to be displayed in the button\n  */\n  icon?: string;\n  /**\n  * Position of the icon displayed in the button\n  */\n  iconPosition?: 'left' | 'right';\n  /**\n  * When present, it specifies the tooltip text for the button\n  */\n  tooltip?: string;\n  /**\n  * Position of the tooltip displayed for the button\n  */\n  tooltipPosition?: 'top' | 'left' | 'bottom' | 'right';\n  /**\n  * When present and true, it specifies that the button should be disabled\n  */\n  isDisabled?: boolean;\n  /**\n  * When present and true, it specifies that the button should be text only\n  */\n  isTextOnly?: boolean;\n  /**\n  * When present and true, it specifies that the button should be raised\n  */\n  isRaised?: boolean;\n  /**\n  * When present and true, it specifies that the button should be rounded\n  */\n  isRounded?: boolean;\n  /**\n  * When present and true, it specifies that the button should be outlined\n  */\n  isOutlined?: boolean;\n  /**\n  * When present, it specifies that the inline style to apply to the button\n  */\n  inlineStyle?: string;\n}\n",
            "properties": [
                {
                    "name": "buttonMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warning\" | \"help\" | \"danger\"",
                    "optional": true,
                    "description": "<p>Style of the button color</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nStyle of the button color\n"
                },
                {
                    "name": "buttonSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"sm\" | \"lg\"",
                    "optional": true,
                    "description": "<p>Size of the button</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nSize of the button\n"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the icon to be displayed in the button</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the button\n"
                },
                {
                    "name": "iconPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"left\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the icon displayed in the button</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nPosition of the icon displayed in the button\n"
                },
                {
                    "name": "inlineStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies that the inline style to apply to the button</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nWhen present, it specifies that the inline style to apply to the button\n"
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be disabled</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be disabled\n"
                },
                {
                    "name": "isOutlined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be outlined</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be outlined\n"
                },
                {
                    "name": "isRaised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be raised</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be raised\n"
                },
                {
                    "name": "isRounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be rounded</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be rounded\n"
                },
                {
                    "name": "isTextOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, it specifies that the button should be text only</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be text only\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the text of the button</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nWhen present, it specifies the text of the button\n"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the tooltip text for the button</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nWhen present, it specifies the tooltip text for the button\n"
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the tooltip displayed for the button</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nPosition of the tooltip displayed for the button\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "optional": true,
                    "description": "<p>When present, it specifies the type of the button</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nWhen present, it specifies the type of the button\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxDropdownOptionType",
            "id": "interface-GuxDropdownOptionType-7f0c539f6928f74ffe3a66fda0c7614e536ba05543ba0796a1eebfa8735ad9b39b60fa1558e5d145b548bb773623c212efc3641356d49f5407df0620a791ab1f",
            "file": "src/app/gux/interfaces/gux-dropdown-option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxDropdownOptionType {\n  /**\n  * Label for this option\n  */\n  label: string;\n  /**\n  * Value for this option\n  */\n  value: string;\n  /**\n  * When present, it specifies that this option should be disabled\n  */\n  disabled?: boolean;\n}",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present, it specifies that this option should be disabled</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nWhen present, it specifies that this option should be disabled\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Label for this option</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nLabel for this option\n"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Value for this option</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nValue for this option\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxDropdownType",
            "id": "interface-GuxDropdownType-601fcb0a1367f180f2603e0f30fce3c5bbb58767555d09fa92e1df69635156af60cdf2b155ac4b4c577df88256c7215eabb723af608442755f4326755a8ceb86",
            "file": "src/app/gux/interfaces/gux-dropdown.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GuxDropdownOptionType } from './gux-dropdown-option.interface';\n\nexport interface GuxDropdownType {\n  /**\n  * Items to be displayed in the dropdown\n  */\n  options: GuxDropdownOptionType[];\n  /**\n  * Name of the label field of an option\n  */\n  optionLabel?: string;\n  /**\n  * Name of the value field of an option\n  */\n  optionValue?: string;\n  /**\n  * Name of the disabled field of an option\n  */\n  optionDisabled?: string;\n  /**\n  * Name of the input element\n  */\n  name?: string;\n  /**\n  * Value of the label to be displayed\n  */\n  label?: string;\n  /**\n  * Position of the label, valid values are top, left and float\n  */\n  labelPosition?: 'top' | 'left' | 'float';\n  /**\n  * When present, it specifies that an input field must be filled out before submitting the form\n  */\n  required?: boolean;\n  /**\n  * Error information to display if the dropdown is required and none selected\n  */\n  requiredError?: string;\n  /**\n  * When present, it specifies that the component should be disabled\n  */\n  isDisabled?: boolean;\n  /**\n  * Default text to display when no option is selected\n  */\n  placeholder?: string;\n  /**\n  * Icon class of the dropdown icon\n  */\n  dropdownIcon?: string;\n  /**\n  * When enabled, a clear icon is displayed to clear the value\n  */\n  showClear?: boolean;\n  /**\n  * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value\n  */\n  scrollHeight?: string;\n  /**\n  * Advisory information to display in a tooltip on hover\n  */\n  tooltip?: string;\n  /**\n  * Position of the tooltip, valid values are right, left, top and bottom\n  */\n  tooltipPosition?: 'top' | 'left' | 'bottom' | 'right';\n}\n",
            "properties": [
                {
                    "name": "dropdownIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Icon class of the dropdown icon</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nIcon class of the dropdown icon\n"
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present, it specifies that the component should be disabled</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nWhen present, it specifies that the component should be disabled\n"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Value of the label to be displayed</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nValue of the label to be displayed\n"
                },
                {
                    "name": "labelPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"float\"",
                    "optional": true,
                    "description": "<p>Position of the label, valid values are top, left and float</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nPosition of the label, valid values are top, left and float\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Name of the input element</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nName of the input element\n"
                },
                {
                    "name": "optionDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Name of the disabled field of an option</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nName of the disabled field of an option\n"
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Name of the label field of an option</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nName of the label field of an option\n"
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxDropdownOptionType[]",
                    "optional": false,
                    "description": "<p>Items to be displayed in the dropdown</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nItems to be displayed in the dropdown\n"
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Name of the value field of an option</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nName of the value field of an option\n"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Default text to display when no option is selected</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nDefault text to display when no option is selected\n"
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present, it specifies that an input field must be filled out before submitting the form</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nWhen present, it specifies that an input field must be filled out before submitting the form\n"
                },
                {
                    "name": "requiredError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Error information to display if the dropdown is required and none selected</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nError information to display if the dropdown is required and none selected\n"
                },
                {
                    "name": "scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nHeight of the viewport in pixels, a scrollbar is defined if height of list exceeds this value\n"
                },
                {
                    "name": "showClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When enabled, a clear icon is displayed to clear the value</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nWhen enabled, a clear icon is displayed to clear the value\n"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Advisory information to display in a tooltip on hover</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nAdvisory information to display in a tooltip on hover\n"
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the tooltip, valid values are right, left, top and bottom</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nPosition of the tooltip, valid values are right, left, top and bottom\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxTableColumnType",
            "id": "interface-GuxTableColumnType-468ca52de85e31e45fd7a3f9ab30e25fcfe7e012c97cb113675b5e0579ea62c9fe5ce831a95330821f366f76e5be95350c234154b2d815c06e397e00bf64d871",
            "file": "src/app/gux/interfaces/gux-table-column.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxTableColumnType {\n  /**\n  * Specifies the name of the field in each row of the rowData collection\n  */\n  field: string;\n  /**\n  * Specifies the data to be displayed in the header for this field\n  */\n  header: string;\n}\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Specifies the name of the field in each row of the rowData collection</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nSpecifies the name of the field in each row of the rowData collection\n"
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Specifies the data to be displayed in the header for this field</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nSpecifies the data to be displayed in the header for this field\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxTableType",
            "id": "interface-GuxTableType-d0053b1c20622f12c66d0ad23f6f9e87d787ba7af687e4305a27a7ac31dfad15bbdc3402f616cbd3922620a1c3b1693917aa6cd5b8e769f1d310fe87c69e8962",
            "file": "src/app/gux/interfaces/gux-table.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GuxTableColumnType } from \"./gux-table-column\";\n\nexport interface GuxTableType {\n  /**\n  * When present, it specifies the caption of the table\n  */\n  caption?: string;\n  /**\n  * When present, it specifies the header of the table\n  */\n  header?: string;\n  /**\n  * Collection of the row values to display\n  */\n  rowData: {}[];\n  /**\n  * Collection of the columns to display\n  */\n  columns: GuxTableColumnType[];\n  /**\n  * When present, it specifies the columns should be displayed at the bottom of the table\n  */\n  footer?: boolean;\n  /**\n  * When present, it contains the text to display when there is no value to display\n  */\n  emptyText?: string;\n  /**\n  * When present, it contains the text to display after the table\n  */\n  summaryText?: string;\n  /**\n  * When present, it defines the row height\n  */\n  rowHeight?: undefined | 'sm' | 'md' | 'lg' | 'xl'\n}",
            "properties": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the caption of the table</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nWhen present, it specifies the caption of the table\n"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "optional": false,
                    "description": "<p>Collection of the columns to display</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nCollection of the columns to display\n"
                },
                {
                    "name": "emptyText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it contains the text to display when there is no value to display</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nWhen present, it contains the text to display when there is no value to display\n"
                },
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present, it specifies the columns should be displayed at the bottom of the table</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nWhen present, it specifies the columns should be displayed at the bottom of the table\n"
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the header of the table</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nWhen present, it specifies the header of the table\n"
                },
                {
                    "name": "rowData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "optional": false,
                    "description": "<p>Collection of the row values to display</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nCollection of the row values to display\n"
                },
                {
                    "name": "rowHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "undefined | \"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "optional": true,
                    "description": "<p>When present, it defines the row height</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nWhen present, it defines the row height\n"
                },
                {
                    "name": "summaryText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it contains the text to display after the table</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nWhen present, it contains the text to display after the table\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxTabPanelContentType",
            "id": "interface-GuxTabPanelContentType-bccbc2bfb57e56a9eb011bc47fcc796576fcf9e430415d3798e86eb79d326fff31afe3a7ff34d32b7ff09a81999b29fb97debe8072ced89481cda27db7157b7c",
            "file": "src/app/gux/interfaces/gux-tabpanel-content.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GuxTabPanelContentType {\n  /**\n  * When present and true, tab content will be HTML\n  */\n  isHTML?: boolean;\n  /**\n  * Defines the content to display in the tab\n  */\n  content: any;\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Defines the content to display in the tab</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nDefines the content to display in the tab\n"
                },
                {
                    "name": "isHTML",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, tab content will be HTML</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nWhen present and true, tab content will be HTML\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxTabPanelType",
            "id": "interface-GuxTabPanelType-ebdac8309ae850124dc985f0d93ade0a9700431a2bad020d43f4689400e359ce3d91c94801501d8ff8d7f3a2905cf916f9da73f792ca5dfadebfaec1c3148214",
            "file": "src/app/gux/interfaces/gux-tabpanel-interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GuxTabPanelContentType } from \"./gux-tabpanel-content.interface\";\n\nexport interface GuxTabPanelType {\n  /**\n  * Title of the tabPanel\n  */\n  header: string;\n  /**\n  * When present, it specifies the icon to be displayed left of the header\n  */\n  leftIcon?: string;\n  /**\n  * When present, it specifies the icon to be displayed left of the header\n  */\n  rightIcon?: string;\n  /**\n  * Title of the tabPanel\n  */\n  content: GuxTabPanelContentType;\n  /**\n  * Defines if tab is active\n  */\n  isSelected?: boolean;\n  /**\n  * When present and true, tab cannot be activated\n  */\n  isDisabled?: boolean;\n  /**\n  * When present and true, tab can be removed\n  */\n  isClosable?: boolean;\n  /**\n  * Whether a lazy loaded panel should avoid getting loaded again on reselection\n  */\n  cache?: boolean;\n  /**\n  * Advisory information to display in a tooltip on hover\n  */\n  tooltip?: string;\n  /**\n  * Position of the tooltip, valid values are right, left, top and bottom\n  */\n  tooltipPosition?: 'top' | 'left' | 'bottom' | 'right';\n}\n",
            "properties": [
                {
                    "name": "cache",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether a lazy loaded panel should avoid getting loaded again on reselection</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nWhether a lazy loaded panel should avoid getting loaded again on reselection\n"
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTabPanelContentType",
                    "optional": false,
                    "description": "<p>Title of the tabPanel</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nTitle of the tabPanel\n"
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Title of the tabPanel</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nTitle of the tabPanel\n"
                },
                {
                    "name": "isClosable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, tab can be removed</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nWhen present and true, tab can be removed\n"
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When present and true, tab cannot be activated</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nWhen present and true, tab cannot be activated\n"
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Defines if tab is active</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nDefines if tab is active\n"
                },
                {
                    "name": "leftIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the icon to be displayed left of the header</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed left of the header\n"
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>When present, it specifies the icon to be displayed left of the header</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed left of the header\n"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Advisory information to display in a tooltip on hover</p>\n",
                    "line": 39,
                    "rawdescription": "\n\nAdvisory information to display in a tooltip on hover\n"
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "optional": true,
                    "description": "<p>Position of the tooltip, valid values are right, left, top and bottom</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nPosition of the tooltip, valid values are right, left, top and bottom\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GuxTabViewType",
            "id": "interface-GuxTabViewType-ba8ba47380a7e61a8848636d3b43ad4e7a0c0226e595d57b775bf0859243eeba727f179bed96a2e48ce5f6abdca8e99e20c2da895aa4dd076aec80db92c0834b",
            "file": "src/app/gux/interfaces/gux-tabview-interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { GuxTabPanelType } from \"./gux-tabpanel-interface\";\n\nexport interface GuxTabViewType {\n  /**\n  * Items to be displayed in the tab view\n  */\n  tabs: GuxTabPanelType[];\n  /**\n  * Index of the active tab to change selected tab programmatically\n  */\n  activeIndex?: number;\n  /**\n  * Whether tab close is controlled at onClose event or not\n  */\n  controlClose?: boolean;\n  /**\n  * When enabled displays buttons at each side of the tab headers to scroll the tab list\n  */\n  scrollable: boolean;\n}\n",
            "properties": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Index of the active tab to change selected tab programmatically</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nIndex of the active tab to change selected tab programmatically\n"
                },
                {
                    "name": "controlClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Whether tab close is controlled at onClose event or not</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nWhether tab close is controlled at onClose event or not\n"
                },
                {
                    "name": "scrollable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>When enabled displays buttons at each side of the tab headers to scroll the tab list</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nWhen enabled displays buttons at each side of the tab headers to scroll the tab list\n"
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTabPanelType[]",
                    "optional": false,
                    "description": "<p>Items to be displayed in the tab view</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nItems to be displayed in the tab view\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "GlobalMessageService",
            "id": "injectable-GlobalMessageService-a4fad05a39167ed3ba3e26a075b01221f51d980f635c98fca1aa763081f06769efb02e1497da1d305477cb27a9a502f71016d80ad05baf5a3fdcd94a6e221e3d",
            "file": "src/app/services/global-message.service.ts",
            "properties": [
                {
                    "name": "subject",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearMessages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "GlobalMessageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "GlobalMessageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n\nimport { GlobalMessageType } from '../interfaces/global-message-type';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GlobalMessageService {\n\n  private subject = new Subject<any>();\n\n  sendMessage(message: GlobalMessageType) {\n    this.subject.next(message);\n  }\n\n  clearMessages() {\n    this.subject.next();\n  }\n\n  getMessage(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-216456583e25428faed77a4328eb6552448b3ca5a60c594cca6093d48f5332766845debfe0c05c76cc89e95f1f958caf3ad9253a229c2cc3a570b8ec03f2b4c7",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-01b29d4eb469267c0e2e5a5f49f1719b6df6d590d52838bcb22a126b7f255b60b1306617870a34a87fc86f799148606da3a1f7508ea4b7620320957aab7f52b1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "GlobalMessageService"
                },
                {
                    "name": "PrimeMessageService"
                }
            ],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "City[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "messages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "navigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "primeMessageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PrimeMessageService",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedCity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "City",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sourceCode",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "defaultValue": "'developer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "collapseAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expandAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nodeSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recursiveToggle",
                    "args": [
                        {
                            "name": "node",
                            "type": "TreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isExpand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "TreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isExpand",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Subscription } from 'rxjs';\n\nimport { TreeNode } from 'primeng/api';\nimport { MessageService as PrimeMessageService } from 'primeng/api';\n\nimport { GlobalMessageService } from './services/global-message.service';\nimport { GlobalMessageType } from './interfaces/global-message-type';\n\nimport { Navigation } from './navigation';\n\n\ninterface City {\n  name: string,\n  code: string,\n  disabled?: boolean\n}\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [ GlobalMessageService, PrimeMessageService ]\n})\n\nexport class AppComponent implements OnDestroy {\n  title = 'developer';\n  navigation: any;\n  messages: any = [];\n  subscription: Subscription;\n\n\n  cities: City[];\n  selectedCity: City;\n\n\n  sourceCode: string = \"\";\n\n  constructor(\n    private router: Router,\n    public primeMessageService: PrimeMessageService,\n    private globalMessageService: GlobalMessageService\n  ) {\n    this.selectedCity = {\n      name: '',\n      code: ''\n    }\n    this.cities = [\n      {name: 'New York', code: 'NY'},\n      {name: 'Rome, Italy', code: 'RM'},\n      {name: 'London', code: 'LDN'},\n      {name: 'Istanbul', code: 'IST'},\n      {name: 'Paris', code: 'PRS'}\n    ];\n\n\n    this.navigation = Navigation;\n    this.subscription = this.globalMessageService.getMessage().subscribe((message: GlobalMessageType) => {\n      this.messages.push(message);\n      this.primeMessageService.add(message);\n    });\n  }\n\n  nodeSelect(event) {\n    if (event.node.type === 'navigation' && event.node.data) {\n      this.router.navigateByUrl(event.node.data);\n    }\n  }\n\n  expandAll(){\n    this.navigation.forEach(node => {\n      this.recursiveToggle(node, true);\n    });\n  }\n\n  collapseAll(){\n    this.navigation.forEach( node => {\n      this.recursiveToggle(node, false);\n    });\n  }\n\n  recursiveToggle(node:TreeNode, isExpand:boolean){\n    node.expanded = isExpand;\n    if (node.children) {\n      node.children.forEach( childNode => {\n        this.recursiveToggle(childNode, isExpand);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\n    height: 100%;\n    width: 100%;\n}\n\n.banner {\n    position: fixed;\n    top: 0px;\n    left: 50%;\n    z-index: 1001;\n    margin-left: -300px;\n    width: 600px;\n}\n\n.content-wrapper {\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    bottom: 0px;\n    width: 100%;\n    font-family: 'Open Sans', sans-serif;\n    display: flex;\n    margin-left: -10px;\n    .left {\n        background-color: #ffffff;\n        width: 300px;\n        min-width: 300px;\n        max-width: 300px;\n        box-shadow: -6px 10px 4px 8px #c8c8c8;\n        .avatar-wrapper {\n            margin: 35px;\n            text-align: center;\n        }\n        .button-wrapper {\n            text-align: center;\n        }\n    }\n    .right {\n        width: calc(100% - #{300px});\n        .demo-header {\n            z-index: 1000;\n            background-image: linear-gradient(197.37deg,rgba(0,120,227,.07) -.38%,rgba(165,72,181,0) 101.89%),linear-gradient(115.93deg,rgba(62,136,246,.15) 4.86%,rgba(62,180,246,.0495) 38.05%,rgba(62,235,246,0) 74.14%),radial-gradient(56.47% 76.87% at 6.92% 7.55%,rgba(62,136,246,.05) 0%,rgba(62,158,246,.013) 52.16%,rgba(62,246,246,0) 100%),linear-gradient(306.53deg,rgba(163,171,217,.1) 19.83%,rgba(163,171,217,0) 97.33%);\n            margin-bottom: 0px;\n            padding: 15px;\n            text-align: center;\n            border-bottom: 1px solid #dee2e6;\n            h1 {\n                color: #007bff;\n                font-size: 40px;\n                font-weight: 200;\n                margin-top: 22px;\n            }\n        }\n        .content {\n            padding: 50px;\n        }\n    }\n}\n\n:host ::ng-deep .p-tree {\n    border-color: transparent;\n}\n\n:host ::ng-deep .p-dropdown {\n    width: auto;\n    min-width: 300px;\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "primeMessageService",
                        "type": "PrimeMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "primeMessageService",
                        "type": "PrimeMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "\n<div class=\"banner\">\n  <p-messages key=\"gux-banner\"></p-messages>\n</div>\n<p-toast\n  key=\"gux-toast\"\n  life=\"3000\"\n></p-toast>\n\n<!--\n<gux-banner></gux-banner>\n-->\n\n<div class=\"content-wrapper\">\n  <span class=\"left\">\n    <div class=\"avatar-wrapper\">\n      <gux-avatar\n        size=\"xlarge\"\n        shape=\"circle\"\n        image=\"../assets/images/jim.jpeg\"\n      ></gux-avatar>\n    </div>\n    \n    <div class=\"button-wrapper\">\n      <gux-button\n        icon=\"angle-double-right\"\n        isRounded=\"true\"\n        isRaised=\"true\"\n        pTooltip=\"Expand All\"\n        tooltipPosition=\"bottom\"\n        (click)=\"expandAll()\"\n        inlineStyle=\"margin-right:.5rem\"\n      ></gux-button>\n      <gux-button\n        isRounded=\"true\"\n        isRaised=\"true\"\n        icon=\"angle-double-up\"\n        pTooltip=\"Collapse All\"\n        tooltipPosition=\"bottom\"\n        (click)=\"collapseAll()\"\n      ></gux-button>\n    </div>\n\n    <p-tree\n        class=\"navTree\"\n        [value]=\"navigation\"\n        selectionMode=\"single\"\n        (onNodeSelect)=\"nodeSelect($event)\"\n    ></p-tree>\n  </span>\n\n  <div class=\"right\" style=\"overflow-y:auto\">\n    <div class=\"demo-header\">\n      <h1>Global UX Documentation and Demo Library</h1>\n    </div>\n    <div class=\"content\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n\n</div>"
        },
        {
            "name": "DocsComponent",
            "id": "component-DocsComponent-d5b5a99bdc6b70fa9d55bb25619aca203ef9fc9f3b094cc3ff0b47944c8cd827955b090956defffc63b2af7c8cef5ea41a59e73af3f76ff7acf76209bb202471",
            "file": "src/app/docs/docs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-docs",
            "styleUrls": [
                "./docs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./docs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { GlobalMessageService } from '../services/global-message.service';\nimport { GlobalMessageType } from '../interfaces/global-message-type';\n\n@Component({\n  selector: 'app-docs',\n  templateUrl: './docs.component.html',\n  styleUrls: ['./docs.component.scss']\n})\nexport class DocsComponent implements OnInit {\n\n  constructor(\n    private globalMessageService: GlobalMessageService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  sendMessage(): void  {\n    const messagePacket: GlobalMessageType = {\n      severity: 'warn',\n      summary: 'This is the message summary',\n      detail: 'This is the message detail',\n      id: 0,\n      key: 'gux-banner',\n      life: 30,\n      sticky: true,\n      closable: true,\n      data: {\n        field1: '1',\n        field2: '2'\n      },\n      icon: 'warning',\n      contentStyleClass: '',\n      styleClass: ''\n    }\n    this.globalMessageService.sendMessage(messagePacket);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./docs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h4>Welcome to the Global UX Documentation and Demo Library</h4>\n<p style=\"width:60%\">My last company initiated a project to create and deliver global Angular reusable UX components(gux team)\n  based on PrimeFaces. The components created by this team would be consumed by all Angular projects within the\n  company(consuming team) via a private npm repository. I was assigned to the gux team and immediately identified core\n  deficiences in the architecture.\n</p>\n<ol>\n  <li>There was no capability of testing these components locally. A gux team developer was required to complete the following steps.\n  <div style=\"margin: 10px 20px 10px 15px\">\n    <img src=\"./assets/images/flow.jpg\" alt=\"Starting changes workflow\">\n  </div>\n  </li>\n  <li>The documentation was inconsistent and out of date on the consuming team's pages</li>\n  <div style=\"margin: 10px 20px 10px 15px\">Coming soon</div>\n  <li>The documentation must be available to introduce into the consuming team's current documentation page or as a standalone application</li>\n  <div style=\"margin: 10px 20px 10px 15px\">Coming soon</div>\n</ol>\n<h5>NOTE: This is a work in progress to get as much shown as possible. The final version will be cleaned up!</h5>"
        },
        {
            "name": "ErrorPage404Component",
            "id": "component-ErrorPage404Component-77027ee4bcd243f2474a17260807a1c2a96680bf4e3ad6949a72fb5c807fd26359fa9390078cb998b9c4fee7a850c6b2efa43ab43df22dbb70c4301dd062e1d5",
            "file": "src/app/docs/components/error-page-404/error-page-404.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "error-page-404",
            "styleUrls": [
                "../../assets/styles/base-styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error-page-404.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'error-page-404',\n  templateUrl: './error-page-404.component.html',\n  styleUrls: ['../../assets/styles/base-styles.scss']\n})\nexport class ErrorPage404Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  background-color: white;\n  border-radius: 10px 10px 0px 0px;\n  .selector {\n    color: #007bff;\n  }\n  .arrows {\n    color: #b6b6b6;\n  }\n  .deprecated {\n    font-style: italic;\n    color: red;\n  }\n  .deprecation-message {\n    margin-top: -15px;\n  }\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    td,\n    th {\n      text-align: left;\n    }\n  }\n}\n\n.demo-container {\n  border: 1px solid white;\n  border-radius: 10px;\n  .demo-wrapper {\n    background-color: white;\n    display: flex;\n    justify-content: space-evenly;\n    border: 1px solid white;\n    border-radius: 10px 10px 0px 0px;\n    padding-bottom: 20px;\n  }\n}\n\n.selector-wrapper {\n    border: 1px solid #c8c8c8;\n    background: #f4f4f4;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 3px;\n}\n\n.comp-error-container {\n  padding: 20px;\n  padding-top: 85px;\n  margin-right: 0px;\n  margin-left: 0px;\n  .comp-error-title {\n    margin-bottom: 10px;\n    font-size: 24px;\n    color: #007bff;\n  }\n  .comp-error-body {\n    padding: 20px;\n    border: 1px solid #acb3b9;\n    border-radius: 10px;\n    .comp-error-header {\n      font-size: 16px;\n      font-weight: bold;\n    }\n    .comp-error-content {\n      margin: 15px 0px;\n      color: #838b92;\n    }\n    .comp-error-footer {\n      color: #838b92;\n      margin-bottom: 30px;\n    }\n  }\n}\npre code {\n  border-radius: 10px;\n}\n\n:host ::ng-deep hr {\n  margin-top: 1.2rem;\n  width: 80%;\n  float: left;\n  border-top-color: #007bff;\n}\n\n:host ::ng-deep .p-grid {\n  margin: 10px 5px;\n  .p-col {\n    padding: 10px;\n  }\n}\n/**\n* Override the github css styles for easier reading\n*/\n:host ::ng-deep .hljs-ln-numbers {\n  width: 25px;\n  border-right: 1px solid #24292e;\n}\n:host ::ng-deep .hljs-ln-code {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "../../assets/styles/base-styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div id=\"content\">\n    <div class=\"comp-error-container row\">\n      <div class=\"col-md-12\">\n        <div class=\"comp-error-title\">\n          The documentation page you navigated to is not currently in Gux\n        </div>\n        <div class=\"comp-error-body\">\n          <div class=\"comp-error-header\">\n            404 - Not Found\n          </div>\n          <div class=\"comp-error-content\">\n            The page you requested does not exist. You may have typed the address incorrectly, or the link or applicaiton that brought you here may be out of date.\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>"
        },
        {
            "name": "GuxAvatarComponent",
            "id": "component-GuxAvatarComponent-2ac5b152835ccce5c960fe397751a43c14a213bf655fa8bf55e8df07f929f3ba237b28aef2f4b06648df67c0c6596ae0ea97ff76716f9daff0d78f49489eb8ab",
            "file": "src/app/gux/components/gux-avatar/gux-avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gux-avatar",
            "styleUrls": [
                "./gux-avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux-avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the avatar\n",
                    "description": "<p>When present, it specifies the icon to be displayed in the avatar</p>\n",
                    "line": 31,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the image to be displayed in the avatar\n",
                    "description": "<p>When present, it specifies the image to be displayed in the avatar</p>\n",
                    "line": 23,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the text to be displayed in the avatar\n",
                    "description": "<p>When present, it specifies the text to be displayed in the avatar</p>\n",
                    "line": 27,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStyle of the avatar color\n",
                    "description": "<p>Style of the avatar color</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "shape",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the shape of the avatar\n",
                    "description": "<p>Specifies the shape of the avatar</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the size of the avatar\n",
                    "description": "<p>When present, it specifies the size of the avatar</p>\n",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "styleClass",
                    "defaultValue": "'gux-avatar-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Style class built from mode</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nStyle class built from mode\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "buildStyleClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Presents variations of the PrimeFaces avatar component</p>\n",
            "rawdescription": "\n\nPresents variations of the PrimeFaces avatar component\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n/**\n* Presents variations of the PrimeFaces avatar component\n*/\n@Component({\n  selector: 'gux-avatar',\n  templateUrl: './gux-avatar.component.html',\n  styleUrls: ['./gux-avatar.component.scss']\n})\nexport class GuxAvatarComponent implements OnInit {\n  /**\n  * When present, it specifies the size of the avatar\n  */\n  @Input() size;\n  /**\n * Specifies the shape of the avatar\n */\n  @Input() shape = 'circle';\n  /**\n  * When present, it specifies the image to be displayed in the avatar\n  */\n  @Input() image;\n  /**\n  * When present, it specifies the text to be displayed in the avatar\n  */\n  @Input() label;\n  /**\n  * When present, it specifies the icon to be displayed in the avatar\n  */\n  @Input() icon;\n  /**\n  * Style of the avatar color\n  */\n  @Input() mode = 'primary';\n\n  /**\n  * Style class built from mode\n  */\n  styleClass: string = 'gux-avatar-';\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.buildStyleClass();\n  }\n\n  buildStyleClass() {\n    switch (this.mode) {\n      case 'secondary':\n        this.styleClass += this.mode;\n        break;\n      case 'success':\n        this.styleClass += this.mode;\n        break;\n      case 'info':\n        this.styleClass += this.mode;\n        break;\n      case 'warning':\n        this.styleClass += this.mode;\n        break;\n      case 'danger':\n        this.styleClass += this.mode;\n        break;\n      case 'light':\n        this.styleClass += this.mode;\n        break;\n      case 'dark':\n        this.styleClass += this.mode;\n        break;\n      default:\n        this.styleClass += 'primary';\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n:host ::ng-deep {\n  .gux-avatar-primary {\n    background-color: var(--primary-color);\n    color: var(--primary-color-text);\n  }\n  .gux-avatar-secondary {\n    background-color: var(--bs-secondary);\n    color: var(--primary-color-text);\n  }\n  .gux-avatar-success {\n    background-color: var(--bs-success);\n    color: var(--primary-color-text);\n  }\n  .gux-avatar-info {\n    background-color: var(--bs-info);\n  }\n  .gux-avatar-warning {\n    background-color: var(--bs-warning);\n  }\n  .gux-avatar-danger {\n    background-color: var(--bs-danger);\n    color: var(--primary-color-text);\n  }\n  .gux-avatar-light {\n    background-color: var(--bs-light);\n  }\n  .gux-avatar-dark {\n    background-color: var(--bs-dark);\n    color: var(--primary-color-text);\n  }\n}",
                    "styleUrl": "./gux-avatar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-avatar\n  *ngIf=\"image\"\n  [size]=\"size\"\n  [shape]=\"shape\"\n  [image]=\"image\"\n></p-avatar>\n\n<p-avatar\n  *ngIf=\"icon\"\n  [size]=\"size\"\n  [shape]=\"shape\"\n  [icon]=\"'pi pi-' + icon\"\n  styleClass=\"{{ styleClass }}\"\n></p-avatar>\n\n<p-avatar\n  *ngIf=\"label\"\n  [size]=\"size\"\n  [shape]=\"shape\"\n  [label]=\"label\"\n  styleClass=\"{{ styleClass }}\"\n></p-avatar>\n"
        },
        {
            "name": "GuxAvatarDemoComponent",
            "id": "component-GuxAvatarDemoComponent-aa10d23e83b8ae264dc3851d3661b255a5b6aefa6e49a1188ca9836ada0fb5b9af63ec14b79658473b4e2a82cb9f64810daf61759bda9661516e69c0aada4e54",
            "file": "src/app/demos/avatar/avatar.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "avatar-demo",
            "styleUrls": [
                "../../docs/assets/styles/base-styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dropdownItems",
                    "defaultValue": "DropdownItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "example",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxAvatarType[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "examples",
                    "defaultValue": "Examples",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { GuxAvatarType } from 'src/app/gux/interfaces/gux-avatar.interface';\nimport { DropdownItems, Examples } from './avatar.data';\n\n@Component({\n  selector: 'avatar-demo',\n  templateUrl: './avatar.html',\n  styleUrls: ['../../docs/assets/styles/base-styles.scss']\n})\nexport class GuxAvatarDemoComponent implements OnInit {\n\n  dropdownItems = DropdownItems;\n  examples = Examples;\n\n  example: GuxAvatarType[];\n    \n  constructor() { }\n\n  ngOnInit() {\n    this.example = this.examples[0];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  background-color: white;\n  border-radius: 10px 10px 0px 0px;\n  .selector {\n    color: #007bff;\n  }\n  .arrows {\n    color: #b6b6b6;\n  }\n  .deprecated {\n    font-style: italic;\n    color: red;\n  }\n  .deprecation-message {\n    margin-top: -15px;\n  }\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    td,\n    th {\n      text-align: left;\n    }\n  }\n}\n\n.demo-container {\n  border: 1px solid white;\n  border-radius: 10px;\n  .demo-wrapper {\n    background-color: white;\n    display: flex;\n    justify-content: space-evenly;\n    border: 1px solid white;\n    border-radius: 10px 10px 0px 0px;\n    padding-bottom: 20px;\n  }\n}\n\n.selector-wrapper {\n    border: 1px solid #c8c8c8;\n    background: #f4f4f4;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 3px;\n}\n\n.comp-error-container {\n  padding: 20px;\n  padding-top: 85px;\n  margin-right: 0px;\n  margin-left: 0px;\n  .comp-error-title {\n    margin-bottom: 10px;\n    font-size: 24px;\n    color: #007bff;\n  }\n  .comp-error-body {\n    padding: 20px;\n    border: 1px solid #acb3b9;\n    border-radius: 10px;\n    .comp-error-header {\n      font-size: 16px;\n      font-weight: bold;\n    }\n    .comp-error-content {\n      margin: 15px 0px;\n      color: #838b92;\n    }\n    .comp-error-footer {\n      color: #838b92;\n      margin-bottom: 30px;\n    }\n  }\n}\npre code {\n  border-radius: 10px;\n}\n\n:host ::ng-deep hr {\n  margin-top: 1.2rem;\n  width: 80%;\n  float: left;\n  border-top-color: #007bff;\n}\n\n:host ::ng-deep .p-grid {\n  margin: 10px 5px;\n  .p-col {\n    padding: 10px;\n  }\n}\n/**\n* Override the github css styles for easier reading\n*/\n:host ::ng-deep .hljs-ln-numbers {\n  width: 25px;\n  border-right: 1px solid #24292e;\n}\n:host ::ng-deep .hljs-ln-code {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "../../docs/assets/styles/base-styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"demo-container\">\n  <div class=\"demo-wrapper\">\n    <div class=\"p-mr-2 p-mb-2\" style=\"text-align: center;\" *ngFor=\"let item of example\">\n      <gux-avatar\n        [shape]=\"item.shape\"\n        [label]=\"item.label\"\n        [size]=\"item.size\"\n        [icon]=\"item.icon\"\n        [image]=\"item.image\"\n        [mode]=\"item.mode\"\n      ></gux-avatar>\n      <div *ngIf=\"item.mode\">{{ item.mode }}</div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "GuxButtonComponent",
            "id": "component-GuxButtonComponent-80319b9cf77cf7c983f1f6ccd57ac8f4f74f2e4f167e8d941c3e7efb219a7e37eb5fb1e6bd9c9da8d47544a501c3f1e0f62e681e3bf8aa2a23b1f4fc0aa0c202",
            "file": "src/app/gux/components/gux-button/gux-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gux-button",
            "styleUrls": [
                "./gux-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonMode",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStyle of the button color\n",
                    "description": "<p>Style of the button color</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonSize",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the button\n",
                    "description": "<p>Size of the button</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the icon to be displayed in the button\n",
                    "description": "<p>When present, it specifies the icon to be displayed in the button</p>\n",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPosition",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition of the icon displayed in the button\n",
                    "description": "<p>Position of the icon displayed in the button</p>\n",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inlineStyle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the inline style to apply to the button\n",
                    "description": "<p>When present, it specifies that the inline style to apply to the button</p>\n",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be disabled\n",
                    "description": "<p>When present, it specifies that the button should be disabled</p>\n",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isOutlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be outlined\n",
                    "description": "<p>When present, it specifies that the button should be outlined</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRaised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be raised\n",
                    "description": "<p>When present, it specifies that the button should be raised</p>\n",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the button should be rounded\n",
                    "description": "<p>When present, it specifies that the button should be rounded</p>\n",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isTextOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present and true, it specifies that the button should be text only\n",
                    "description": "<p>When present and true, it specifies that the button should be text only</p>\n",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the text of the button\n",
                    "description": "<p>When present, it specifies the text of the button</p>\n",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the tooltip text for the button\n",
                    "description": "<p>When present, it specifies the tooltip text for the button</p>\n",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition of the tooltip displayed for the button\n",
                    "description": "<p>Position of the tooltip displayed for the button</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nType of the button\n",
                    "description": "<p>Type of the button</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the button loses focus\n",
                    "description": "<p>Event to emit when the button loses focus</p>\n",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the button is clicked\n",
                    "description": "<p>Event to emit when the button is clicked</p>\n",
                    "line": 71,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the button is focused\n",
                    "description": "<p>Event to emit when the button is focused</p>\n",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonClass",
                    "defaultValue": "'p-button '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains the button class string</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nContains the button class string\n"
                },
                {
                    "name": "onBtnBlur",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handles the button blur and emits the onBlur event</p>\n",
                    "line": 133,
                    "rawdescription": "\n\nHandles the button blur and emits the onBlur event\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBtnClick",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handles the button click and emits the onClick event</p>\n",
                    "line": 119,
                    "rawdescription": "\n\nHandles the button click and emits the onClick event\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onBtnFocus",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Handles the button focus and emits the onFocus event</p>\n",
                    "line": 126,
                    "rawdescription": "\n\nHandles the button focus and emits the onFocus event\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buildButtonConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBuilds the logic to create the button class string\n",
                    "description": "<p>Builds the logic to create the button class string</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Presents variations of the PrimeFaces button component</p>\n",
            "rawdescription": "\n\nPresents variations of the PrimeFaces button component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n/**\n* Presents variations of the PrimeFaces button component\n*/\n@Component({\n  selector: 'gux-button',\n  templateUrl: './gux-button.component.html',\n  styleUrls: ['./gux-button.component.scss'],\n})\nexport class GuxButtonComponent implements OnInit {\n  /**\n  * Type of the button\n  */\n  @Input() type: string = 'button';\n  /**\n  * When present, it specifies the text of the button\n  */\n  @Input() label: string = '';\n  /**\n  * Style of the button color\n  */\n  @Input() buttonMode: string = 'primary';\n  /**\n  * Size of the button\n  */\n  @Input() buttonSize: string = '';\n  /**\n  * When present, it specifies the icon to be displayed in the button\n  */\n  @Input() icon: string = '';\n  /**\n  * Position of the icon displayed in the button\n  */\n  @Input() iconPosition: string = '';\n  /**\n  * When present, it specifies the tooltip text for the button\n  */\n  @Input() tooltip: string = '';\n  /**\n  * Position of the tooltip displayed for the button\n  */\n  @Input() tooltipPosition: string = '';\n  /**\n  * When present, it specifies that the button should be disabled\n  */\n  @Input() isDisabled: boolean = false;\n  /**\n  * When present and true, it specifies that the button should be text only\n  */\n  @Input() isTextOnly: boolean = false;\n  /**\n  * When present, it specifies that the button should be raised\n  */\n  @Input() isRaised: boolean = false;\n  /**\n  * When present, it specifies that the button should be rounded\n  */\n  @Input() isRounded: boolean = false;\n  /**\n  * When present, it specifies that the button should be outlined\n  */\n  @Input() isOutlined: boolean = false;\n  /**\n  * When present, it specifies that the inline style to apply to the button\n  */\n  @Input() inlineStyle: string = '';\n  /**\n  * Event to emit when the button is clicked\n  */\n  @Output() onClick = new EventEmitter();\n  /**\n  * Event to emit when the button is focused\n  */\n  @Output() onFocus = new EventEmitter();\n  /**\n  * Event to emit when the button loses focus\n  */\n  @Output() onBlur = new EventEmitter();\n\n  /**\n  * Contains the button class string\n  */\n  buttonClass: string = 'p-button ';\n\n  constructor() {}\n\n  ngOnInit() {\n    this.buildButtonConfig();\n  }\n\n  /**\n  * Builds the logic to create the button class string\n  */\n  buildButtonConfig() {\n    if (this.buttonSize) {\n      this.buttonClass = 'p-button-' + this.buttonSize + ' ';    \n    }\n    if (this.buttonMode) {\n      this.buttonClass += 'p-button-' + this.buttonMode + ' ';\n    }\n    if (this.isTextOnly) {\n      this.buttonClass += 'p-button-text ';\n    }\n    if (!!this.isRaised) {\n      this.buttonClass += 'p-button-raised ';\n    }\n    if (!!this.isRounded) {\n      this.buttonClass += 'p-button-rounded ';\n    }\n    if (!!this.isOutlined) {\n      this.buttonClass += 'p-button-outlined ';\n    }\n  }\n\n  /**\n  * Handles the button click and emits the onClick event\n  */\n  public onBtnClick = ($event) => {\n    this.onClick.emit({ event: $event });\n  }\n\n  /**\n  * Handles the button focus and emits the onFocus event\n  */\n  public onBtnFocus = ($event) => {\n    this.onFocus.emit({ event: $event });\n  }\n\n  /**\n  * Handles the button blur and emits the onBlur event\n  */\n  public onBtnBlur = ($event) => {\n    this.onBlur.emit({ event: $event });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./gux-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 84
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button\n  pButton pRipple\n  [type]=\"type\"\n  [label]=\"label\"\n  [class]=\"buttonClass\"\n  [pTooltip]=\"tooltip\"\n  [tooltipPosition]=\"tooltipPosition\"\n  [icon]=\"'pi pi-' + icon\"\n  [iconPos]=\"iconPosition\"\n  [style]=\"inlineStyle\"\n  [disabled]=\"isDisabled\"\n  (click)=\"onBtnClick($event)\"\n  (focus)=\"onBtnFocus($event)\"\n  (blur)=\"onBtnBlur($event)\"\n></button>"
        },
        {
            "name": "GuxButtonDemoComponent",
            "id": "component-GuxButtonDemoComponent-99370dbaa67ccbcf95357a8adc99e0dc8803de22caf67ff29824bf0b74b920c804a11383e239f6c3ecc287ade2d7aff4af24509589e30a7fef5f7ba4059f7395",
            "file": "src/app/demos/button/button.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button-demo",
            "styleUrls": [
                "../../docs/assets/styles/base-styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnClicked",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dropdownItems",
                    "defaultValue": "DropdownItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "example",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxButtonType[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "examples",
                    "defaultValue": "Examples",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { GlobalMessageService } from 'src/app/services/global-message.service';\nimport { GlobalMessageType } from 'src/app/interfaces/global-message-type';\n\nimport { GuxButtonType } from 'src/app/gux/interfaces/gux-button.interface';\nimport { DropdownItems, Examples } from './button.data';\n\n@Component({\n  selector: 'button-demo',\n  templateUrl: './button.html',\n  styleUrls: ['../../docs/assets/styles/base-styles.scss']\n})\nexport class GuxButtonDemoComponent implements OnInit {\n\n  dropdownItems = DropdownItems;\n  examples = Examples;\n\n  example: GuxButtonType[];\n    \n  constructor(\n    private globalMessageService: GlobalMessageService\n  ) { }\n\n  ngOnInit() {\n    this.example = this.examples[0];\n  }\n\n  public btnClicked = ($event, btnLabel, btnIcon) => {\n    let detail: string = 'Unknown value';\n    if (btnLabel) {\n      detail = 'Clicked on button with label: ' + btnLabel;\n    } else if (btnIcon) {\n      detail = 'Clicked on button with icon: ' + btnIcon;\n    }\n    const messagePacket: GlobalMessageType = {\n      severity: 'success',\n      summary: 'Global Message Bus Delivery',\n      detail: detail,\n      key: 'gux-toast',\n      life: 2000,\n      sticky: false,\n      closable: false\n    }\n    this.globalMessageService.sendMessage(messagePacket);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  background-color: white;\n  border-radius: 10px 10px 0px 0px;\n  .selector {\n    color: #007bff;\n  }\n  .arrows {\n    color: #b6b6b6;\n  }\n  .deprecated {\n    font-style: italic;\n    color: red;\n  }\n  .deprecation-message {\n    margin-top: -15px;\n  }\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    td,\n    th {\n      text-align: left;\n    }\n  }\n}\n\n.demo-container {\n  border: 1px solid white;\n  border-radius: 10px;\n  .demo-wrapper {\n    background-color: white;\n    display: flex;\n    justify-content: space-evenly;\n    border: 1px solid white;\n    border-radius: 10px 10px 0px 0px;\n    padding-bottom: 20px;\n  }\n}\n\n.selector-wrapper {\n    border: 1px solid #c8c8c8;\n    background: #f4f4f4;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 3px;\n}\n\n.comp-error-container {\n  padding: 20px;\n  padding-top: 85px;\n  margin-right: 0px;\n  margin-left: 0px;\n  .comp-error-title {\n    margin-bottom: 10px;\n    font-size: 24px;\n    color: #007bff;\n  }\n  .comp-error-body {\n    padding: 20px;\n    border: 1px solid #acb3b9;\n    border-radius: 10px;\n    .comp-error-header {\n      font-size: 16px;\n      font-weight: bold;\n    }\n    .comp-error-content {\n      margin: 15px 0px;\n      color: #838b92;\n    }\n    .comp-error-footer {\n      color: #838b92;\n      margin-bottom: 30px;\n    }\n  }\n}\npre code {\n  border-radius: 10px;\n}\n\n:host ::ng-deep hr {\n  margin-top: 1.2rem;\n  width: 80%;\n  float: left;\n  border-top-color: #007bff;\n}\n\n:host ::ng-deep .p-grid {\n  margin: 10px 5px;\n  .p-col {\n    padding: 10px;\n  }\n}\n/**\n* Override the github css styles for easier reading\n*/\n:host ::ng-deep .hljs-ln-numbers {\n  width: 25px;\n  border-right: 1px solid #24292e;\n}\n:host ::ng-deep .hljs-ln-code {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "../../docs/assets/styles/base-styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"demo-container\">\n  <div class=\"demo-wrapper\">\n    <div class=\"p-mr-2 p-mb-2\" style=\"text-align: center;\" *ngFor=\"let item of example\">\n      <gux-button\n        [label]=\"item.label\"\n        [buttonMode]=\"item.buttonMode\"\n        [buttonSize]=\"item.buttonSize\"\n        [icon]=\"item.icon\"\n        [iconPosition]=\"item.iconPosition\"\n        [tooltip]=\"item.tooltip\"\n        [tooltipPosition]=\"item.tooltipPosition\"\n        [isDisabled]=\"item.isDisabled\"\n        [isTextOnly]=\"item.isTextOnly\"\n        [isRaised]=\"item.isRaised\"\n        [isOutlined]=\"item.isOutlined\"\n        [isRounded]=\"item.isRounded\"\n        (onClick)=\"btnClicked($event, item.label, item.icon)\"\n      ></gux-button>\n      <div *ngIf=\"item.buttonMode\">{{ item.buttonMode }}</div>\n    </div>\n  </div>\n\n</div>\n"
        },
        {
            "name": "GuxDropdownComponent",
            "id": "component-GuxDropdownComponent-205516db8f93e7831fec148b1fb8c6e9dd9a233018c6648d07f718b983c04be8102257b6adeaafbd82ec0e3f84e18c33c402fd3469dcab7b685cf854c884b7e6",
            "file": "src/app/gux/components/gux-dropdown/gux-dropdown.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => GuxDropdownComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "gux-dropdown",
            "styleUrls": [
                "./gux-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux-dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that the component should be disabled\n",
                    "description": "<p>When present, it specifies that the component should be disabled</p>\n",
                    "line": 90,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValue of the label to be displayed\n",
                    "description": "<p>Value of the label to be displayed</p>\n",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition of the label, valid values are top and left\n",
                    "description": "<p>Position of the label, valid values are top and left</p>\n",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the input element\n",
                    "description": "<p>Name of the input element</p>\n",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the disabled field of an option\n",
                    "description": "<p>Name of the disabled field of an option</p>\n",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the label field of an option\n",
                    "description": "<p>Name of the label field of an option</p>\n",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nItems to be displayed in the dropdown\n",
                    "description": "<p>Items to be displayed in the dropdown</p>\n",
                    "line": 54,
                    "type": "GuxDropdownOptionType[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nName of the value field of an option\n",
                    "description": "<p>Name of the value field of an option</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies that an input field must be filled out before submitting the form\n",
                    "description": "<p>When present, it specifies that an input field must be filled out before submitting the form</p>\n",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "requiredError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nError information to display if the dropdown is required and none selected\n",
                    "description": "<p>Error information to display if the dropdown is required and none selected</p>\n",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "GuxDropdownOptionType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown loses focus\n",
                    "description": "<p>Event to emit when the dropdown loses focus</p>\n",
                    "line": 106,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown changes value\n",
                    "description": "<p>Event to emit when the dropdown changes value</p>\n",
                    "line": 98,
                    "type": "EventEmitter"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown is clicked\n",
                    "description": "<p>Event to emit when the dropdown is clicked</p>\n",
                    "line": 94,
                    "type": "EventEmitter"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown is focused\n",
                    "description": "<p>Event to emit when the dropdown is focused</p>\n",
                    "line": 102,
                    "type": "EventEmitter"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown is hidden\n",
                    "description": "<p>Event to emit when the dropdown is hidden</p>\n",
                    "line": 114,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEvent to emit when the dropdown is shown\n",
                    "description": "<p>Event to emit when the dropdown is shown</p>\n",
                    "line": 110,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dropdownIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Icon class of the dropdown icon</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nIcon class of the dropdown icon\n"
                },
                {
                    "name": "guxDropdownElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'guxDropdownElement', {static: false}"
                        }
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "Function.prototype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Default text to display when no option is selected</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nDefault text to display when no option is selected\n"
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nHeight of the viewport in pixels, a scrollbar is defined if height of list exceeds this value\n"
                },
                {
                    "name": "showClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>When enabled, a clear icon is displayed to clear the value</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nWhen enabled, a clear icon is displayed to clear the value\n"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Advisory information to display in a tooltip on hover</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nAdvisory information to display in a tooltip on hover\n"
                },
                {
                    "name": "tooltipPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Position of the tooltip, valid values are right, left, top and bottom</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nPosition of the tooltip, valid values are right, left, top and bottom\n"
                },
                {
                    "name": "viewLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hide",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": "GuxDropdownOptionType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "GuxDropdownOptionType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Presents variations of the PrimeFaces button component</p>\n",
            "rawdescription": "\n\nPresents variations of the PrimeFaces button component\n",
            "type": "component",
            "sourceCode": "import {\n  Component, OnInit, Input, Output, EventEmitter, ElementRef, ViewChild, Renderer2, AfterViewInit, ViewEncapsulation,\n  forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { GuxDropdownOptionType } from '../../interfaces/gux-dropdown-option.interface';\n\n/**\n* Presents variations of the PrimeFaces button component\n*/\n@Component({\n  selector: 'gux-dropdown',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './gux-dropdown.component.html',\n  styleUrls: ['./gux-dropdown.component.scss'],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => GuxDropdownComponent),\n    multi: true\n  }]\n})\nexport class GuxDropdownComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n  /**\n  * Default text to display when no option is selected\n  */\n  placeholder?: string;\n  /**\n  * Icon class of the dropdown icon\n  */\n  dropdownIcon?: string;\n  /**\n  * When enabled, a clear icon is displayed to clear the value\n  */\n  showClear?: boolean;\n  /**\n  * Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value\n  */\n  scrollHeight?: string;\n  /**\n  * Advisory information to display in a tooltip on hover\n  */\n  tooltip?: string;\n  /**\n  * Position of the tooltip, valid values are right, left, top and bottom\n  */\n  tooltipPosition?: string;\n\n\n  @Input() selectedItem: GuxDropdownOptionType;\n\n  /**\n  * Items to be displayed in the dropdown\n  */\n  @Input() options: GuxDropdownOptionType[];\n  /**\n  * Name of the label field of an option\n  */\n  @Input() optionLabel: string = 'label';\n  /**\n  * Name of the value field of an option\n  */\n  @Input() optionValue: string= 'value';\n  /**\n  * Name of the disabled field of an option\n  */\n  @Input() optionDisabled: string = 'disabled';\n  /**\n  * Name of the input element\n  */\n  @Input() name: string = '';\n  /**\n  * Value of the label to be displayed\n  */\n  @Input() label: string = '';\n  /**\n  * Position of the label, valid values are top and left\n  */\n  @Input() labelPosition: string = 'top';\n  /**\n  * When present, it specifies that an input field must be filled out before submitting the form\n  */\n  @Input() required: boolean;\n  /**\n  * Error information to display if the dropdown is required and none selected\n  */\n  @Input() requiredError: string = '';\n  /**\n  * When present, it specifies that the component should be disabled\n  */\n  @Input() isDisabled: boolean;\n  /**\n  * Event to emit when the dropdown is clicked\n  */\n  @Output() onClick = new EventEmitter();\n  /**\n  * Event to emit when the dropdown changes value\n  */\n  @Output() onChange = new EventEmitter();\n  /**\n  * Event to emit when the dropdown is focused\n  */\n  @Output() onFocus = new EventEmitter();\n  /**\n  * Event to emit when the dropdown loses focus\n  */\n  @Output() onBlur = new EventEmitter();\n  /**\n  * Event to emit when the dropdown is shown\n  */\n  @Output() onShow = new EventEmitter();\n  /**\n  * Event to emit when the dropdown is hidden\n  */\n  @Output() onHide = new EventEmitter();\n\n  viewLoaded = false;\n\n  public onTouched: any = Function.prototype; // Trascent the onTouch event\n\n  @ViewChild('guxDropdownElement', { static: false })\n  guxDropdownElement: ElementRef;\n\n  constructor(private renderer: Renderer2) { }\n\n  ngOnInit() { }\n\n  ngAfterViewInit() {\n    this.viewLoaded = true;\n  }\n\n  writeValue(val: GuxDropdownOptionType) {\n    this.selectedItem = val;\n  }\n\n  // registers 'fn' that will be fired when changes are made\n  // this is how we emit the changes back to the form\n  public registerOnChange(fn: any) {\n    this.propagateChange = fn;\n  }\n\n  // not used, used for touch input\n  public registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n\n  // the method set in registerOnChange to emit changes back to the form\n  public propagateChange = (_: any) => { };\n\n  click($event) {\n    this.onClick.emit($event);\n  }\n\n  change($event) {\n    this.onChange.emit($event);\n  }\n\n  focus($event) {\n    this.onFocus.emit($event);\n  }\n\n  blur($event) {\n    this.onBlur.emit($event);\n  }\n  show($event) {\n    this.onShow.emit($event);\n  }\n\n  hide($event) {\n    this.onHide.emit($event);\n  }\n\n  /* load error message in the component */\n  get error() {\n    if (this.viewLoaded) {\n      if (this.requiredError) {\n        this.renderer.addClass(\n          this.guxDropdownElement.nativeElement.getElementsByClassName('p-dropdown')[0],\n          'p-dropdown-error'\n        );\n        return this.requiredError;\n      } else {\n        this.renderer.removeClass(\n          this.guxDropdownElement.nativeElement.getElementsByClassName('p-dropdown')[0],\n          'p-dropdown-error'\n        );\n        return '';\n      }\n    }\n    return '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./gux-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 121,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "",
                        "returnType": "",
                        "line": 173
                    }
                }
            },
            "templateData": "<span #guxDropdownElement class=\"dropdownWrap\">\n  <span class=\"inner-label\" *ngIf=\"label\"> {{ label }}</span>\n  <p-dropdown\n    styleClass=\"gux-dropdown\"\n    [options]=\"options\"\n    (onClick)=\"click($event)\"\n    (onChange)=\"change($event)\"\n    (onFocus)=\"focus($event)\"\n    (onBlur)=\"blur($event)\"\n    (onShow)=\"show($event)\"\n    (onHide)=\"hide($event)\"\n    [placeholder]=\"placeholder\"\n  ></p-dropdown>\n</span>\n\n\n<span *ngIf=\"label && labelPosition == 'float'\" class=\"p-float-label\">\n  <p-dropdown\n    inputId=\"dropdown\"\n    [options]=\"options\"\n    [autoDisplayFirst]=\"false\"\n    optionLabel=\"name\"\n  ></p-dropdown>\n  <label for=\"dropdown\">Dropdown</label>\n</span>\n\n<!--\n<span>\n  <label *ngIf=\"label && labelPosition == 'top'\"> {{ label }}</label>\n  <ng-template *ngIf=\"selectedItemIcon\" let-item pTemplate=\"selectedItem\">\n    <img src=\"{{ selectedItemIcon }}\" class=\"selectedItemIcon\" />\n    <span>{{ item.label }}</span>\n  </ng-template>\n</span>\n-->\n"
        },
        {
            "name": "GuxTableComponent",
            "id": "component-GuxTableComponent-08b4cc5c9dc55b8c87e8aa1cb0c7bd8d8e7d44d52f2ce0dc9f80b8574555d9a06cd3f9c32bf019a5366d406189538569bd6746b77d062cd124ed02780a920220",
            "file": "src/app/gux/components/gux-table/gux-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gux-table",
            "styleUrls": [
                "./gux-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./gux-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "caption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the header of the table\n",
                    "description": "<p>When present, it specifies the header of the table</p>\n",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollection of the columns to display\n",
                    "description": "<p>Collection of the columns to display</p>\n",
                    "line": 22,
                    "type": "GuxTableColumnType[]",
                    "decorators": []
                },
                {
                    "name": "emptyText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it contains the text to display when there is no value to display\n",
                    "description": "<p>When present, it contains the text to display when there is no value to display</p>\n",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "footer",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it specifies the columns should be displayed at the bottom of the table\n",
                    "description": "<p>When present, it specifies the columns should be displayed at the bottom of the table</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rowData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCollection of the row values to display\n",
                    "description": "<p>Collection of the row values to display</p>\n",
                    "line": 18,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "rowHeight",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it defines the row height\n",
                    "description": "<p>When present, it defines the row height</p>\n",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "summaryText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen present, it contains the text to display after the table\n",
                    "description": "<p>When present, it contains the text to display after the table</p>\n",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rowClass",
                    "defaultValue": "'gux-row-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\nimport { GuxTableColumnType } from '../../interfaces/gux-table-column';\n\n@Component({\n  selector: 'gux-table',\n  templateUrl: './gux-table.component.html',\n  styleUrls: ['./gux-table.component.scss']\n})\nexport class GuxTableComponent implements OnInit {\n  /**\n  * When present, it specifies the header of the table\n  */\n  @Input() caption: string;\n  /**\n  * Collection of the row values to display\n  */\n  @Input() rowData: {}[] = [];\n  /**\n  * Collection of the columns to display\n  */\n  @Input() columns: GuxTableColumnType[] = [];\n  /**\n  * When present, it specifies the columns should be displayed at the bottom of the table\n  */\n  @Input() footer: boolean = false;\n  /**\n  * When present, it contains the text to display when there is no value to display\n  */\n  @Input() emptyText: string = '';\n  /**\n  * When present, it contains the text to display after the table\n  */\n  @Input() summaryText: string = '';\n  /**\n  * When present, it defines the row height\n  */\n  @Input() rowHeight: string = 'md';\n\n  rowClass = 'gux-row-';\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.rowClass += this.rowHeight;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".empty {\n  color: #b6b6b6;\n  padding: 10px 15px;\n}\n:host ::ng-deep {\n  .gux-row-sm {\n    padding: 4px 1rem !important;\n  }\n  .gux-row-md {\n    padding: .5rem 1rem !important;\n  }\n  .gux-row-lg {\n    padding: 1rem 1rem !important;\n  }\n  .gux-row-xl {\n    padding: 1.5rem 1rem !important;\n  }\n}",
                    "styleUrl": "./gux-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p-table\n  styleClass=\"p-datatable-striped\"\n  [columns]=\"columns\"\n  [value]=\"rowData\">\n\n  <ng-template\n    *ngIf=\"caption\"\n    pTemplate=\"caption\">\n      {{ caption }}\n  </ng-template>\n\n  <ng-template\n    *ngIf=\"columns.length\"\n    pTemplate=\"header\"\n    let-columns>\n    <tr>\n      <th *ngFor=\"let col of columns\" class=\"{{ rowClass }}\">{{ col.header }}</th>\n    </tr>\n  </ng-template>\n\n  <ng-template\n    *ngIf=\"rowData.length\"\n    pTemplate=\"body\"\n    let-rowData\n    let-columns=\"columns\">\n    <tr>\n      <td *ngFor=\"let col of columns\" class=\"{{ rowClass }}\">{{ rowData[col.field] }}</td>\n    </tr>\n  </ng-template>\n\n  <ng-template\n    *ngIf=\"!rowData.length && emptyText\"\n    pTemplate=\"footer\">\n    <div class=\"empty\">{{ emptyText }}</div>\n  </ng-template>\n\n  <ng-template\n    *ngIf=\"summaryText\"\n    pTemplate=\"summary\">\n      {{ summaryText }}\n  </ng-template>\n\n</p-table>\n<div>&nbsp;</div>\n"
        },
        {
            "name": "GuxTabsDemoComponent",
            "id": "component-GuxTabsDemoComponent-415e458468b56fc1d1671bf5faeba4bd928e0a742cf242a74f97da93dc505cbf74ede0d8451c231e0314e62aae7e57b17fb41daf6e90af9b1195b3468dc1b1cf",
            "file": "src/app/demos/tabs/tabs.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "tabs-demo",
            "styleUrls": [
                "../../docs/assets/styles/base-styles.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tabs.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnClicked",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "componentFactoryResolver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentFactoryResolver",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dropdownItems",
                    "defaultValue": "DropdownItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "example",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTabViewType[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "examples",
                    "defaultValue": "Examples",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ComponentFactoryResolver, OnInit } from '@angular/core';\n\nimport { GlobalMessageService } from 'src/app/services/global-message.service';\nimport { GlobalMessageType } from 'src/app/interfaces/global-message-type';\n\nimport { GuxTabViewType } from 'src/app/gux/interfaces/gux-tabview-interface';\nimport { DropdownItems, Examples } from './tabs.data';\n\n@Component({\n  selector: 'tabs-demo',\n  templateUrl: './tabs.html',\n  styleUrls: ['../../docs/assets/styles/base-styles.scss']\n})\nexport class GuxTabsDemoComponent implements OnInit {\n\n  dropdownItems = DropdownItems;\n  examples = Examples;\n\n  example: GuxTabViewType[];\n    \n  constructor(\n    public componentFactoryResolver: ComponentFactoryResolver,\n    private globalMessageService: GlobalMessageService\n  ) { }\n\n  ngOnInit() {\n    this.example = this.examples[0];\n    \n    if (!this.cardData.body.isHTML) {\n      let contentFactory = this.componentFactoryResolver.resolveComponentFactory(this.cardData.body.content);\n      cardComponent.instance['componentData'] = this.cardData.body.componentData;\n    }\n  }\n\n  public btnClicked = ($event, btnLabel, btnIcon) => {\n    let detail: string = 'Unknown value';\n    if (btnLabel) {\n      detail = 'Clicked on button with label: ' + btnLabel;\n    } else if (btnIcon) {\n      detail = 'Clicked on button with icon: ' + btnIcon;\n    }\n    const messagePacket: GlobalMessageType = {\n      severity: 'success',\n      summary: 'Global Message Bus Delivery',\n      detail: detail,\n      key: 'gux-toast',\n      life: 2000,\n      sticky: false,\n      closable: false\n    }\n    this.globalMessageService.sendMessage(messagePacket);\n  }\n\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\n  background-color: white;\n  border-radius: 10px 10px 0px 0px;\n  .selector {\n    color: #007bff;\n  }\n  .arrows {\n    color: #b6b6b6;\n  }\n  .deprecated {\n    font-style: italic;\n    color: red;\n  }\n  .deprecation-message {\n    margin-top: -15px;\n  }\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    td,\n    th {\n      text-align: left;\n    }\n  }\n}\n\n.demo-container {\n  border: 1px solid white;\n  border-radius: 10px;\n  .demo-wrapper {\n    background-color: white;\n    display: flex;\n    justify-content: space-evenly;\n    border: 1px solid white;\n    border-radius: 10px 10px 0px 0px;\n    padding-bottom: 20px;\n  }\n}\n\n.selector-wrapper {\n    border: 1px solid #c8c8c8;\n    background: #f4f4f4;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 3px;\n}\n\n.comp-error-container {\n  padding: 20px;\n  padding-top: 85px;\n  margin-right: 0px;\n  margin-left: 0px;\n  .comp-error-title {\n    margin-bottom: 10px;\n    font-size: 24px;\n    color: #007bff;\n  }\n  .comp-error-body {\n    padding: 20px;\n    border: 1px solid #acb3b9;\n    border-radius: 10px;\n    .comp-error-header {\n      font-size: 16px;\n      font-weight: bold;\n    }\n    .comp-error-content {\n      margin: 15px 0px;\n      color: #838b92;\n    }\n    .comp-error-footer {\n      color: #838b92;\n      margin-bottom: 30px;\n    }\n  }\n}\npre code {\n  border-radius: 10px;\n}\n\n:host ::ng-deep hr {\n  margin-top: 1.2rem;\n  width: 80%;\n  float: left;\n  border-top-color: #007bff;\n}\n\n:host ::ng-deep .p-grid {\n  margin: 10px 5px;\n  .p-col {\n    padding: 10px;\n  }\n}\n/**\n* Override the github css styles for easier reading\n*/\n:host ::ng-deep .hljs-ln-numbers {\n  width: 25px;\n  border-right: 1px solid #24292e;\n}\n:host ::ng-deep .hljs-ln-code {\n  padding-left: 15px;\n}\n",
                    "styleUrl": "../../docs/assets/styles/base-styles.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "globalMessageService",
                        "type": "GlobalMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"demo-container\">\n  <div class=\"demo-wrapper\">\n    <div class=\"p-mr-2 p-mb-2\" *ngFor=\"let item of example\">\n      <gux-button\n        [label]=\"item.label\"\n        [buttonMode]=\"item.buttonMode\"\n        [buttonSize]=\"item.buttonSize\"\n        [icon]=\"item.icon\"\n        [iconPosition]=\"item.iconPosition\"\n        [tooltip]=\"item.tooltip\"\n        [tooltipPosition]=\"item.tooltipPosition\"\n        [isDisabled]=\"item.isDisabled\"\n        [isTextOnly]=\"item.isTextOnly\"\n        [isRaised]=\"item.isRaised\"\n        [isOutlined]=\"item.isOutlined\"\n        [isRounded]=\"item.isRounded\"\n        (onClick)=\"btnClicked($event, item.label, item.icon)\"\n      ></gux-button>\n    </div>\n  </div>\n\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-606bba3b789d3dc99b7b13dd1466115c94dd83036617fef14dac8d5272f0532df2eebe4fb91f3c4d23c706e7d0052d065648601986de5da6bf2019389bb7b94e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { PrimengModule } from './primeng/primeng.module';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { DemosModule } from './demos/demos.module';\nimport { DocsModule } from './docs/docs.module';\nimport { GuxModule } from './gux/gux.module';\n\n@NgModule({\n  declarations: [ AppComponent ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n\n    PrimengModule,\n\n    DemosModule,\n    DocsModule,\n    GuxModule\n  ],\n  exports: [ PrimengModule ],\n  providers: [ ],\n  bootstrap: [ AppComponent ]\n})\n\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "DemosModule"
                        },
                        {
                            "name": "DocsModule"
                        },
                        {
                            "name": "GuxModule"
                        },
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ed62314d71493d9b22dcd42aa0a0b30dc4c902219c2165a3b9eb5c925cc277a78eda5e686343fcdc549ec3e563c1933a9a809a2a3e3ef075330614f381f6cbfc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DocsComponentBaseComponent } from './docs/components/component-base/component-base.component';\nimport { DocsInterfaceBaseComponent } from './docs/components/interface-base/interface-base.component';\n\nimport { DocsComponent } from './docs/docs.component';\nconst routes: Routes = [{\n  path: '',\n  redirectTo: 'docs',\n  pathMatch: 'full'\n}, {\n  path: 'docs',\n  component: DocsComponent\n}, {\n  path: 'components/:target',\n  component: DocsComponentBaseComponent\n}, {\n  path: 'interfaces/:target',\n  component: DocsInterfaceBaseComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemosModule",
            "id": "module-DemosModule-9a68ab43e9072479f37efc7922b0c897826541b7694e4c9fa28f427e267fc4e0d90e56c11b2c1a82d58e573e2a92ae07a1112b5b64714c98596baff2a441a0f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/demos/demos.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GuxModule } from '../gux/gux.module';\n\nimport { GuxAvatarDemoComponent } from './avatar/avatar';\nimport { GuxButtonDemoComponent } from './button/button';\n\n@NgModule({\n  declarations: [\n    GuxAvatarDemoComponent,\n    GuxButtonDemoComponent\n  ],\n  imports: [\n    CommonModule,\n    GuxModule\n  ]\n})\nexport class DemosModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GuxAvatarDemoComponent"
                        },
                        {
                            "name": "GuxButtonDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GuxModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocsModule",
            "id": "module-DocsModule-8ac982dd952fe8cc5b12d687074f42df91c87eb24526c702235d84e57a6deee04a1105c4b41621ef158f6e09c18d05d99890f48e06699c6a2498e93e2e5c87c5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/docs/docs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\n\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\n\nimport { PrimengModule } from '../primeng/primeng.module';\nimport { GuxModule } from '../gux/gux.module';\n\nimport { DocsComponent } from './docs.component';\nimport { DocsComponentBaseComponent } from './components/component-base/component-base.component';\nimport { DocsInterfaceBaseComponent } from './components/interface-base/interface-base.component';\n\nimport { DocsService } from './services/docs.service';\n\nimport { GuxAvatarDemoComponent } from '../demos/avatar/avatar';\nimport { GuxButtonDemoComponent } from '../demos/button/button';\n\n@NgModule({\n  declarations: [\n    DocsComponent,\n    DocsComponentBaseComponent,\n    DocsInterfaceBaseComponent\n  ],\n  imports: [\n    CommonModule,\n    PrimengModule,\n    GuxModule,\n    ClipboardModule,\n    HighlightModule\n  ],\n  providers: [{\n    provide: HIGHLIGHT_OPTIONS,\n    useValue: {\n      coreLibraryLoader: () => import('highlight.js/lib/core'),\n      lineNumbersLoader: () => import('highlightjs-line-numbers.js'),\n      languages: {\n        typescript: () => import('highlight.js/lib/languages/typescript'),\n        css: () => import('highlight.js/lib/languages/css'),\n        scss: () => import('highlight.js/lib/languages/scss'),\n        json: () => import('highlight.js/lib/languages/json'),\n        xml: () => import('highlight.js/lib/languages/xml')\n      }\n    }\n  }]\n})\nexport class DocsModule {\n  constructor(\n    private router: Router,\n    private docsService: DocsService\n  ) {\n    this.docsService.getDocumentation();\n    this.docsService.setDemoComponents({\n      GuxButtonComponent: {\n        name: 'GuxButtonDemoComponent',\n        demo: GuxButtonDemoComponent\n      },\n      GuxAvatarComponent: {\n        name: 'GuxAvatarDemoComponent',\n        demo: GuxAvatarDemoComponent\n      }\n    });\n    this.router.routeReuseStrategy.shouldReuseRoute = function () {\n      return false;\n    };\n  }\n }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GuxModule"
                        },
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GuxModule",
            "id": "module-GuxModule-52b52ef02592329bbe19c25cdef766b69761262c3b81df0fe40b397c62e985012d9468d3dfe373669baa9960ab4ea64a2c0d71a2ef7b7fa73e03b6390da13114",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/gux/gux.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { PrimengModule } from '../primeng/primeng.module';\n\nimport { GuxAvatarComponent } from './components/gux-avatar/gux-avatar.component';\nimport { GuxButtonComponent } from './components/gux-button/gux-button.component';\nimport { GuxDropdownComponent } from './components/gux-dropdown/gux-dropdown.component';\nimport { GuxTableComponent } from './components/gux-table/gux-table.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    PrimengModule\n  ],\n  declarations: [\n    GuxAvatarComponent,\n    GuxButtonComponent,\n    GuxDropdownComponent,\n    GuxTableComponent\n  ],\n  exports: [\n    GuxAvatarComponent,\n    GuxButtonComponent,\n    GuxDropdownComponent,\n    GuxTableComponent\n  ]\n})\nexport class GuxModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GuxAvatarComponent"
                        },
                        {
                            "name": "GuxButtonComponent"
                        },
                        {
                            "name": "GuxDropdownComponent"
                        },
                        {
                            "name": "GuxTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrimengModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GuxAvatarComponent"
                        },
                        {
                            "name": "GuxButtonComponent"
                        },
                        {
                            "name": "GuxDropdownComponent"
                        },
                        {
                            "name": "GuxTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrimengModule",
            "id": "module-PrimengModule-0826d588aa1f5a64313ae0c58eee104b911b552198115ad9117ea923f11f684b06f1860b8f352f52fcd7da9875824c0cf0605c19eac79bbbafbb31c8658d636d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/primeng/primeng.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccordionModule } from 'primeng/accordion';\nimport { AvatarModule } from 'primeng/avatar';\nimport { BadgeModule } from 'primeng/badge';\nimport { ButtonModule } from 'primeng/button';\nimport { DropdownModule } from 'primeng/dropdown';\nimport { MessageModule } from 'primeng/message';\nimport { MessagesModule } from 'primeng/messages';\nimport { TableModule, Table } from 'primeng/table';\nimport { TabViewModule, TabView, TabPanel } from 'primeng/tabview';\nimport { ToastModule } from 'primeng/toast';\nimport { TooltipModule } from \"primeng/tooltip\";\nimport { TreeModule } from 'primeng/tree';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n\n    AccordionModule,\n    AvatarModule,\n    BadgeModule,\n    ButtonModule,\n    DropdownModule,\n    MessageModule,\n    MessagesModule,\n    TableModule,\n    TabViewModule,\n    ToastModule,\n    TooltipModule,\n    TreeModule\n  ],\n  \n  exports: [\n    AccordionModule,\n    AvatarModule,\n    BadgeModule,\n    ButtonModule,\n    DropdownModule,\n    MessageModule,\n    MessagesModule,\n    TableModule,\n    TabViewModule,\n    ToastModule,\n    TooltipModule,\n    TreeModule\n  ]\n})\nexport class PrimengModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CURD_ACTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  deleteError: 'deleteError',\n  delete: 'delete',\n  addError: 'addError',\n  add: 'add',\n}"
            },
            {
                "name": "DefaultPageSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "50"
            },
            {
                "name": "DefaultRetainCache",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/gux/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "true"
            },
            {
                "name": "EnumerationColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'value',\n  header: 'Value'\n}]"
            },
            {
                "name": "EnumerationIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "HostListenersColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "InputColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "InterfaceColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "MethodsColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "MiscellaneousList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "[{\n  name: 'gux',\n  location: 'src/app/gux'\n}]"
            },
            {
                "name": "Navigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TreeNode[]",
                "defaultValue": "[{\n  label: 'Home',\n  type: 'navigation',\n  data: '/'\n}, {\n  label: 'Components',\n  type: 'navigation',\n  data: 'components/home/cux',\n  children: [{\n    label: 'Avatar',\n    type: 'navigation',\n    data: 'components/GuxAvatarComponent'\n  }, {\n    label: 'Button',\n    type: 'navigation',\n    data: 'components/GuxButtonComponent'\n  }, {\n    label: 'Dropdown',\n    type: 'navigation',\n    data: 'components/GuxDropdownComponent'\n  }, {\n    label: 'Table (Simple)',\n    type: 'navigation',\n    data: 'components/GuxTableComponent'\n  }]\n}, {\n  label: 'Interfaces',\n  type: 'navigation',\n  data: 'interfaces/home/cux',\n  children: [{\n    label: 'Avatar',\n    type: 'navigation',\n    data: 'interfaces/GuxAvatarType'\n  }, {\n    label: 'Button',\n    type: 'navigation',\n    data: 'interfaces/GuxButtonType'\n  }, {\n    label: 'Dropdown',\n    type: 'navigation',\n    data: 'interfaces/GuxDropdownType'\n  }, {\n    label: 'Dropdown Option',\n    type: 'navigation',\n    data: 'interfaces/GuxDropdownOptionType'\n  }, {\n    label: 'Table',\n    type: 'navigation',\n    data: 'interfaces/GuxTableType'\n  }, {\n    label: 'Table Column',\n    type: 'navigation',\n    data: 'interfaces/GuxTableColumnType'\n  }]\n}]"
            },
            {
                "name": "OutputColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "PropertiesColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GuxTableColumnType[]",
                "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "TypealiasIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[]"
            },
            {
                "name": "VariableIgnore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/docs/constants.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "[\n  'MODAL_DATA',\n  'require',\n  'testCardAddress'\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/gux/constants.ts": [
                {
                    "name": "CURD_ACTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  deleteError: 'deleteError',\n  delete: 'delete',\n  addError: 'addError',\n  add: 'add',\n}"
                },
                {
                    "name": "DefaultPageSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "50"
                },
                {
                    "name": "DefaultRetainCache",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/gux/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "true"
                }
            ],
            "src/app/docs/constants.ts": [
                {
                    "name": "EnumerationColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'value',\n  header: 'Value'\n}]"
                },
                {
                    "name": "EnumerationIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "HostListenersColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "InputColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "InterfaceColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "MethodsColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "MiscellaneousList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "[{\n  name: 'gux',\n  location: 'src/app/gux'\n}]"
                },
                {
                    "name": "OutputColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "PropertiesColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GuxTableColumnType[]",
                    "defaultValue": "[{\n  field: 'name',\n  header: 'Name'\n}, {\n  field: 'type',\n  header: 'Type'\n}, {\n  field: 'defaultValue',\n  header: 'Default Value'\n}, {\n  field: 'optional',\n  header: 'Optional'\n}, {\n  field: 'rawdescription',\n  header: 'Description'\n}]"
                },
                {
                    "name": "TypealiasIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "VariableIgnore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/docs/constants.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "[\n  'MODAL_DATA',\n  'require',\n  'testCardAddress'\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/navigation.ts": [
                {
                    "name": "Navigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TreeNode[]",
                    "defaultValue": "[{\n  label: 'Home',\n  type: 'navigation',\n  data: '/'\n}, {\n  label: 'Components',\n  type: 'navigation',\n  data: 'components/home/cux',\n  children: [{\n    label: 'Avatar',\n    type: 'navigation',\n    data: 'components/GuxAvatarComponent'\n  }, {\n    label: 'Button',\n    type: 'navigation',\n    data: 'components/GuxButtonComponent'\n  }, {\n    label: 'Dropdown',\n    type: 'navigation',\n    data: 'components/GuxDropdownComponent'\n  }, {\n    label: 'Table (Simple)',\n    type: 'navigation',\n    data: 'components/GuxTableComponent'\n  }]\n}, {\n  label: 'Interfaces',\n  type: 'navigation',\n  data: 'interfaces/home/cux',\n  children: [{\n    label: 'Avatar',\n    type: 'navigation',\n    data: 'interfaces/GuxAvatarType'\n  }, {\n    label: 'Button',\n    type: 'navigation',\n    data: 'interfaces/GuxButtonType'\n  }, {\n    label: 'Dropdown',\n    type: 'navigation',\n    data: 'interfaces/GuxDropdownType'\n  }, {\n    label: 'Dropdown Option',\n    type: 'navigation',\n    data: 'interfaces/GuxDropdownOptionType'\n  }, {\n    label: 'Table',\n    type: 'navigation',\n    data: 'interfaces/GuxTableType'\n  }, {\n    label: 'Table Column',\n    type: 'navigation',\n    data: 'interfaces/GuxTableColumnType'\n  }]\n}]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "docs",
                        "pathMatch": "full"
                    },
                    {
                        "path": "docs",
                        "component": "DocsComponent"
                    },
                    {
                        "path": "components/:target",
                        "component": "DocsComponentBaseComponent"
                    },
                    {
                        "path": "interfaces/:target",
                        "component": "DocsInterfaceBaseComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    }
}